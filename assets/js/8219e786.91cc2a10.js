"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[6237],{8366:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>r});var t=s(4848),i=s(8453);const c={},o="liquid.Context",d={id:"api/context",title:"liquid.Context",description:"A render context, containing namespaces for template variables and a references to the bound environment.",source:"@site/docs/api/context.md",sourceDirName:"api",slug:"/api/context",permalink:"/liquid/api/context",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/api/context.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"liquid.exceptions",permalink:"/liquid/api/exceptions"},next:{title:"liquid.tag.Tag",permalink:"/liquid/api/Tag"}},l={},r=[{value:"<code>Context</code>",id:"context",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>env</code>",id:"env",level:3},{value:"<code>locals</code>",id:"locals",level:3},{value:"<code>globals</code>",id:"globals",level:3},{value:"<code>counters</code>",id:"counters",level:3},{value:"<code>scope</code>",id:"scope",level:3},{value:"<code>loops</code>",id:"loops",level:3},{value:"<code>disabled_tags</code>",id:"disabled_tags",level:3},{value:"<code>autoescape</code>",id:"autoescape",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>assign</code>",id:"assign",level:3},{value:"<code>get</code>",id:"get",level:3},{value:"<code>get_async</code>",id:"get_async",level:3},{value:"<code>resolve</code>",id:"resolve",level:3},{value:"<code>filter</code>",id:"filter",level:3},{value:"<code>get_size_of_locals</code>",id:"get_size_of_locals",level:3},{value:"<code>get_template</code>",id:"get_template",level:3},{value:"<code>get_template_async</code>",id:"get_template_async",level:3},{value:"<code>extend</code>",id:"extend",level:3},{value:"<code>copy</code>",id:"copy",level:3},{value:"<code>error</code>",id:"error",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.useMDXComponents)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"liquidcontext",children:"liquid.Context"}),"\n",(0,t.jsx)(n.p,{children:"A render context, containing namespaces for template variables and a references to the bound environment."}),"\n",(0,t.jsxs)(n.p,{children:["You probably don't want to instantiate a context directly. A new one is created automatically every time a template is rendered. If you're writing custom tags, consider ",(0,t.jsx)(n.a,{href:"#copy",children:"copying"})," or ",(0,t.jsx)(n.a,{href:"#extend",children:"extending"})," an existing context."]}),"\n",(0,t.jsx)(n.h2,{id:"context",children:(0,t.jsx)(n.code,{children:"Context"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"class Context(env, [options])"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"env: liquid.Environment"})," - The ",(0,t.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,t.jsx)(n.code,{children:"Environment"})})," associated with this context."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"globals: Optional[Mapping[str, object]]"})," - Template global variables."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"disabled_tags: Optional[List[str]]"}),' - A list of tags names that are disallowed in this context.\nFor example, partial templates rendered using the "render" tag are not allowed to use "include"\ntags.']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"copy_depth: int = 0"})," - The number times a context was copied to create this one."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"env",children:(0,t.jsx)(n.code,{children:"env"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"liquid.Environment"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,t.jsx)(n.code,{children:"Environment"})})," associated with this context."]}),"\n",(0,t.jsx)(n.h3,{id:"locals",children:(0,t.jsx)(n.code,{children:"locals"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"Dict[str, Any]"})]}),"\n",(0,t.jsxs)(n.p,{children:["A namespace for template local variables. Those that are bound with ",(0,t.jsx)(n.code,{children:"assign"})," or ",(0,t.jsx)(n.code,{children:"capture"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"globals",children:(0,t.jsx)(n.code,{children:"globals"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"Mapping[str, object]"})]}),"\n",(0,t.jsx)(n.p,{children:"A read-only namespace containing globally available variables. Usually passed down from the\nenvironment."}),"\n",(0,t.jsx)(n.h3,{id:"counters",children:(0,t.jsx)(n.code,{children:"counters"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"Dict[str, int]"})]}),"\n",(0,t.jsxs)(n.p,{children:["A namespace for ",(0,t.jsx)(n.code,{children:"increment"})," and ",(0,t.jsx)(n.code,{children:"decrement"})," counters."]}),"\n",(0,t.jsx)(n.h3,{id:"scope",children:(0,t.jsx)(n.code,{children:"scope"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"ReadOnlyChainMap"})]}),"\n",(0,t.jsx)(n.p,{children:"Namespaces are searched using this chain map. When a context is extended, the temporary namespace is\npushed to the front of this chain."}),"\n",(0,t.jsx)(n.h3,{id:"loops",children:(0,t.jsx)(n.code,{children:"loops"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"List[object]"})]}),"\n",(0,t.jsxs)(n.p,{children:["As stack of ",(0,t.jsx)(n.code,{children:"forloop"})," objects. Used for populating ",(0,t.jsx)(n.code,{children:"forloop.parentloop"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"disabled_tags",children:(0,t.jsx)(n.code,{children:"disabled_tags"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"List[str]"})]}),"\n",(0,t.jsx)(n.p,{children:'A list of tags names that are disallowed in this context. For example, partial templates rendered\nusing the "render" tag are not allowed to use "include" tags.'}),"\n",(0,t.jsx)(n.h3,{id:"autoescape",children:(0,t.jsx)(n.code,{children:"autoescape"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"bool"})]}),"\n",(0,t.jsx)(n.p,{children:"Indicates if HTML auto-escaping is enabled."}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"assign",children:(0,t.jsx)(n.code,{children:"assign"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"assign(key: str, val: Any) -> None"})}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"val"})," to the local namespace with key ",(0,t.jsx)(n.code,{children:"key"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"get",children:(0,t.jsx)(n.code,{children:"get"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"get(path: Union[str, Sequence[Union[str, int]]], default: object = _undefined) -> object:"})}),"\n",(0,t.jsxs)(n.p,{children:["Return the value at path ",(0,t.jsx)(n.code,{children:"path"})," if it is in scope, else default."]}),"\n",(0,t.jsx)(n.h3,{id:"get_async",children:(0,t.jsx)(n.code,{children:"get_async"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"async get_async(key: str, val: Any) -> None"})}),"\n",(0,t.jsxs)(n.p,{children:["An async version of ",(0,t.jsx)(n.a,{href:"#get",children:(0,t.jsx)(n.code,{children:"get()"})}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"resolve",children:(0,t.jsx)(n.code,{children:"resolve"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"resolve(name: str, default: object = _undefined) -> Any"})}),"\n",(0,t.jsxs)(n.p,{children:["Return the object at ",(0,t.jsx)(n.code,{children:"name"})," in the current scope. This is like ",(0,t.jsx)(n.a,{href:"#get",children:(0,t.jsx)(n.code,{children:"get()"})}),", but does a single, top-level lookup rather than a chained lookup from a sequence of keys.`"]}),"\n",(0,t.jsx)(n.h3,{id:"filter",children:(0,t.jsx)(n.code,{children:"filter"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"filter(name: str) -> Callable[..., object]"})}),"\n",(0,t.jsx)(n.p,{children:"Return the filter function with given name."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),": NoSuchFilterFunc if a filter with the given name does not exist."]}),"\n",(0,t.jsx)(n.h3,{id:"get_size_of_locals",children:(0,t.jsx)(n.code,{children:"get_size_of_locals"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"get_size_of_locals(self) -> int"})}),"\n",(0,t.jsx)(n.p,{children:'Return the "size" or a "score" for the current local namespace.'}),"\n",(0,t.jsxs)(n.p,{children:["This is used by the optional local namespace resource limit. Override ",(0,t.jsx)(n.code,{children:"get_size_of_locals"})," to customize how the limit is calculated. Be sure to consider ",(0,t.jsx)(n.code,{children:"self.local_namespace_size_carry"})," when writing a custom implementation of ",(0,t.jsx)(n.code,{children:"get_size_of_locals"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The default implementation uses ",(0,t.jsx)(n.code,{children:"sys.getsizeof()"})," on each of the local namespace's values. It is not a reliable measure of size in bytes."]}),"\n",(0,t.jsx)(n.h3,{id:"get_template",children:(0,t.jsx)(n.code,{children:"get_template"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"get_template(name: str) -> BoundTemplate"})}),"\n",(0,t.jsx)(n.p,{children:"Load a template from the environment."}),"\n",(0,t.jsx)(n.h3,{id:"get_template_async",children:(0,t.jsx)(n.code,{children:"get_template_async"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"async get_template_async(name: str) -> BoundTemplate"})}),"\n",(0,t.jsx)(n.p,{children:"Load a template from the environment asynchronously."}),"\n",(0,t.jsx)(n.h3,{id:"extend",children:(0,t.jsx)(n.code,{children:"extend"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"extend(namespace: Mapping[str, object]) -> Iterator[Context]"})}),"\n",(0,t.jsx)(n.p,{children:"A context manager that extends this context with the given read-only namespace."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),": ",(0,t.jsx)(n.code,{children:"ContextDepthError"})," if the context has been extended too many times."]}),"\n",(0,t.jsx)(n.h3,{id:"copy",children:(0,t.jsx)(n.code,{children:"copy"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"copy( self, namespace: Dict[str, object], disabled_tags: Optional[List[str]] = None) -> Context:"})}),"\n",(0,t.jsx)(n.p,{children:"Return a copy of this context without any local variables or other state for stateful tags."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),": ",(0,t.jsx)(n.code,{children:"ContextDepthError"})," if the context has been copied too many times."]}),"\n",(0,t.jsx)(n.h3,{id:"error",children:(0,t.jsx)(n.code,{children:"error"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"error(exc: Error) -> None:"})}),"\n",(0,t.jsx)(n.p,{children:"Ignore, raise or convert the given exception to a warning, according to the current tolerance mode."})]})}function h(e={}){const{wrapper:n}={...(0,i.useMDXComponents)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.r(n),s.d(n,{MDXProvider:()=>d,useMDXComponents:()=>o});var t=s(6540);const i={},c=t.createContext(i);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);
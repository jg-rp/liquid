"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[4936],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>s,withMDXComponents:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),p=function(e){return function(n){var t=s(n.components);return a.createElement(e,i({},n,{components:t}))}},s=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(m.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,c=p["".concat(l,".").concat(u)]||p[u]||h[u]||i;return t?a.createElement(c,o(o({ref:n},m),{},{components:t})):a.createElement(c,o({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=f;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const i={},l="Loading Templates",o={unversionedId:"introduction/loading-templates",id:"introduction/loading-templates",title:"Loading Templates",description:"You can load templates from a file system or database, for example, by creating an Environment and configuring a template loader. You'd also need a loader if you want to use the built-in {% include %} or {% render %} tags.",source:"@site/docs/introduction/loading-templates.md",sourceDirName:"introduction",slug:"/introduction/loading-templates",permalink:"/liquid/introduction/loading-templates",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/loading-templates.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/liquid/introduction/getting-started"},next:{title:"Render Context",permalink:"/liquid/introduction/render-context"}},d={},m=[{value:"Caching File System Loader",id:"caching-file-system-loader",level:2}],p={toc:m},s="wrapper";function u(e){let{components:n,...t}=e;return(0,r.mdx)(s,(0,a.default)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"loading-templates"},"Loading Templates"),(0,r.mdx)("p",null,"You can load templates from a file system or database, for example, by creating an ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment"))," and configuring a template ",(0,r.mdx)("em",{parentName:"p"},"loader"),". You'd also need a loader if you want to use the built-in ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#include"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% include %}"))," or ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% render %}"))," tags."),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#get_template"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment.get_template()"))," and ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#get_template_async"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment.get_template_async()"))," accept a template name and return a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate"},(0,r.mdx)("inlineCode",{parentName:"a"},"BoundTemplate")),". That is a template bound to the environment, ready to be rendered. It is up to the loader to interpret a template name. In the case of ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/filesystemloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"FileSystemLoader")),", the name would be a file name, possibly preceded by a path relative to the configured search path."),(0,r.mdx)("p",null,"Available, built-in loaders are ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/cachingfilesystemloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"CachingFileSystemLoader")),", ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/filesystemloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"FileSystemLoader")),", ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/fileextensionloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"FileExtensionLoader")),", ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/dictloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"DictLoader"))," and ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/choiceloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"ChoiceLoader")),". See also ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/custom-loaders"},"custom loaders"),", and examples of a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/custom-loaders#front-matter-loader"},(0,r.mdx)("inlineCode",{parentName:"a"},"FrontMatterFileSystemLoader"))," and an ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/custom-loaders#async-database-loader"},(0,r.mdx)("inlineCode",{parentName:"a"},"AsyncDatabaseLoader")),"."),(0,r.mdx)("p",null,"This example assumes a folder called ",(0,r.mdx)("inlineCode",{parentName:"p"},"templates")," exists in the current working directory, and that template files ",(0,r.mdx)("inlineCode",{parentName:"p"},"index.html")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"some-list.html")," exist within it."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html",metastring:'title="templates/index.html"',title:'"templates/index.html"'},"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{{ page_title }}</title>\n  </head>\n  <body>\n    <h1>{{ heading }}</h1>\n    {% render 'some-list.html' with people %}\n  </body>\n</html>\n")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html",metastring:'title="templates/some-list.html"',title:'"templates/some-list.html"'},"<ul>\n  {% for person in people %}\n  <li>{{ person.name }}</li>\n  {% endfor %}\n</ul>\n")),(0,r.mdx)("p",null,"By default, every ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment"))," is created with an empty ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/dictloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"DictLoader")),". Specify an alternative template loader using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"loader")," argument."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid import FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\n\npeople = [\n    {"name": "John"},\n    {"name": "Sally"},\n]\n\ntemplate = env.get_template("index.html")\n\nprint(template.render(\n    heading="Some List",\n    page_title="Awesome Title",\n    people=people,\n))\n')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>Awesome Title</title>\n  </head>\n  <body>\n    <h1>Some List</h1>\n    <ul>\n      <li>John</li>\n\n      <li>Sally</li>\n    </ul>\n  </body>\n</html>\n')),(0,r.mdx)("admonition",{type:"info"},(0,r.mdx)("p",{parentName:"admonition"},"Notice how whitespace is output unchanged. See ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/introduction#whitespace-control"},(0,r.mdx)("inlineCode",{parentName:"a"},"whitespace control"))," for more information.")),(0,r.mdx)("h2",{id:"caching-file-system-loader"},"Caching File System Loader"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},(0,r.mdx)("em",{parentName:"strong"},"New in version 1.9.0"))),(0,r.mdx)("p",null,"When rendering partial templates with ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#include"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% include %}"))," or ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% render %}")),", or making use of Python Liquid's ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/extra/tags#extends--block"},"template inheritance features"),", it is recommended to use a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/cachingfilesystemloader"},(0,r.mdx)("inlineCode",{parentName:"a"},"CachingFileSystemLoader"))," or a custom loader that handles its own cache."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import CachingFileSystemLoader\nfrom liquid import Environment\n\nloader = CachingFileSystemLoader("templates/", cache_size=500)\nenv = Environment(loader=loader)\n\n# ...\n')))}u.isMDXComponent=!0}}]);
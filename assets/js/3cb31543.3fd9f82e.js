"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=i,c=d["".concat(p,".").concat(g)]||d[g]||u[g]||r;return n?a.createElement(c,o(o({ref:t},m),{},{components:n})):a.createElement(c,o({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const r={},o="Custom Tags",s={unversionedId:"guides/custom-tags",id:"guides/custom-tags",title:"Custom Tags",description:"A Liquid tag is defined by a pair of Python classes. One a subclass of liquid.tag.Tag and one a subclass of liquid.ast.Node. The required parse() method of a Tag is responsible for parsing a tag's expression and returning a Node, which will be added to a template's parse tree.",source:"@site/docs/guides/custom-tags.md",sourceDirName:"guides",slug:"/guides/custom-tags",permalink:"/liquid/guides/custom-tags",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/custom-tags.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Filters",permalink:"/liquid/guides/custom-filters"},next:{title:"Custom Loaders",permalink:"/liquid/guides/custom-loaders"}},p={},l=[{value:"Add a Tag",id:"add-a-tag",level:2},{value:"Example Tag",id:"example-tag",level:3},{value:"Example Node",id:"example-node",level:3},{value:"Example Tag Usage",id:"example-tag-usage",level:3},{value:"Replace a Tag",id:"replace-a-tag",level:2},{value:"Remove a Tag",id:"remove-a-tag",level:2}],m={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-tags"},"Custom Tags"),(0,i.kt)("p",null,"A Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquid/language/introduction#tags"},"tag")," is defined by a pair of Python classes. One a subclass of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"liquid.tag.Tag"))," and one a subclass of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/node"},(0,i.kt)("inlineCode",{parentName:"a"},"liquid.ast.Node")),". The required ",(0,i.kt)("inlineCode",{parentName:"p"},"parse()")," method of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," is responsible for parsing a tag's expression and returning a ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),", which will be added to a template's parse tree."),(0,i.kt)("p",null,"You can add to, remove or modify Liquid's built-in tags to suit your needs by registering tags with an ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment")),", then rendering your templates from that environment."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"All built-in tags are implemented in this way, so have a look in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid/tree/main/liquid/builtin/tags"},"liquid/builtin/tags/")," for examples.")),(0,i.kt)("h2",{id:"add-a-tag"},"Add a Tag"),(0,i.kt)("p",null,"Taking inspiration from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#with"},"Django's Template Language"),", lets implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag, which extends the local scope for the duration of its block. Our ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag's expressions consists of one or more named arguments separated by commas. Each argument is a variable name, followed by a colon, then a Liquid keyword, string, integer, float, range expression or identifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% with <identifier>: <object> [, <identifier>: <object> ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n")),(0,i.kt)("p",null,"This implementation keeps any variables set inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," block (using ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),") alive after the block has been rendered."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can find an alternative implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag in ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/jg-rp/4ee5a864b57ea756800786833e4af1ee"},"this gist"),". It uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dabeaz/sly"},"SLY")," to tokenize and parse ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," expressions."),(0,i.kt)("p",{parentName:"admonition"},"While this alternative implementation is arguably easier to understand and maintain, it does not lend itself to static type checking and is slower than the approach used by Python Liquid's built-in tags.")),(0,i.kt)("h3",{id:"example-tag"},"Example Tag"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," is free to parse its expression any way it chooses. Built in tags use regular expressions to generate a stream of tokens, then step through those tokens yielding ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression")," objects."),(0,i.kt)("p",null,"Here we'll reuse the tokenizer from the ",(0,i.kt)("a",{parentName:"p",href:"/liquid/language/tags#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include"))," tag, as it, too, accepts any number of comma separated named arguments. We will, however, supply a different set of allowed keywords to the tokenizer function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="with_tag.py"',title:'"with_tag.py"'},'from __future__ import annotations\n\nimport sys\n\nfrom functools import partial\n\nfrom typing import TYPE_CHECKING\nfrom typing import Dict\nfrom typing import NamedTuple\nfrom typing import Optional\nfrom typing import TextIO\n\nfrom liquid.ast import Node\nfrom liquid.ast import BlockNode\n\nfrom liquid.context import Context\nfrom liquid.expression import Expression\n\nfrom liquid.lex import include_expression_rules\nfrom liquid.lex import _compile_rules\nfrom liquid.lex import _tokenize\n\nfrom liquid.parse import expect\nfrom liquid.parse import get_parser\nfrom liquid.parse import parse_expression\nfrom liquid.parse import parse_unchained_identifier\n\nfrom liquid.stream import TokenStream\nfrom liquid.tag import Tag\n\nfrom liquid.token import Token\nfrom liquid.token import TOKEN_TAG\nfrom liquid.token import TOKEN_EXPRESSION\nfrom liquid.token import TOKEN_TRUE\nfrom liquid.token import TOKEN_FALSE\nfrom liquid.token import TOKEN_NIL\nfrom liquid.token import TOKEN_NULL\nfrom liquid.token import TOKEN_COLON\nfrom liquid.token import TOKEN_AS\nfrom liquid.token import TOKEN_EOF\nfrom liquid.token import TOKEN_COMMA\n\n\nif TYPE_CHECKING:\n    from liquid import Environment\n\nTAG_WITH = sys.intern("with")\nTAG_ENDWITH = sys.intern("endwith")\n\nwith_expression_keywords = frozenset(\n    [\n        TOKEN_TRUE,\n        TOKEN_FALSE,\n        TOKEN_NIL,\n        TOKEN_NULL,\n        TOKEN_AS,\n    ]\n)\n\ntokenize_with_expression = partial(\n    _tokenize,\n    rules=_compile_rules(include_expression_rules),\n    keywords=with_expression_keywords,\n)\n\n\nclass WithKeywordArg(NamedTuple):\n    name: str\n    expr: Expression\n\n# ...\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Tag#parse"},(0,i.kt)("inlineCode",{parentName:"a"},"parse()"))," method of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," object receives a ",(0,i.kt)("inlineCode",{parentName:"p"},"TokenStream")," as its only argument. This stream of tokens includes template literals, output statements, tags and unparsed tag expressions."),(0,i.kt)("p",null,"The current token in the stream will always be of the type ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_TAG"),", representing the start of the tag we're parsing. By convention, this token is used to populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"token")," property of the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," object. If the tag has an expression (anything after the tag's name), it will immediately follow the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_TAG")," in the stream as a ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_EXPRESSION"),". In the example bellow we use ",(0,i.kt)("inlineCode",{parentName:"p"},"expect()")," to confirm that an expression has been provided."),(0,i.kt)("p",null,"We retrieve a ",(0,i.kt)("inlineCode",{parentName:"p"},"Parser")," from the active ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment")),", then use its ",(0,i.kt)("inlineCode",{parentName:"p"},"parse_block")," method parse our ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag's block, which could contain any number of other tags and output statements. Every block tag is expected to leave the stream with it's \"end\" tag as the current token."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"parse_argument")," is an implementation detail and not a required method of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"liquid.tag.Tag")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="with_tag.py (continued)"',title:'"with_tag.py','(continued)"':!0},"class WithTag(Tag):\n    name = TAG_WITH\n    end = TAG_ENDWITH\n\n    def __init__(self, env: Environment):\n        super().__init__(env)\n        self.parser = get_parser(self.env)\n\n    def parse(self, stream: TokenStream) -> Node:\n        expect(stream, TOKEN_TAG, value=TAG_WITH)\n        tok = stream.current\n\n        stream.next_token()\n        expect(stream, TOKEN_EXPRESSION)\n        expr_stream = TokenStream(tokenize_with_expression(stream.current.value))\n\n        # A dictionary to help handle duplicate keywords.\n        args = {}\n\n        while expr_stream.current.type != TOKEN_EOF:\n            key, expr = self.parse_argument(expr_stream)\n            args[key] = expr\n\n            if expr_stream.current.type == TOKEN_COMMA:\n                expr_stream.next_token()  # Eat comma\n\n        stream.next_token()\n        block = self.parser.parse_block(stream, (TAG_ENDWITH, TOKEN_EOF))\n        expect(stream, TOKEN_TAG, value=TAG_ENDWITH)\n\n        return WithNode(tok=tok, args=args, block=block)\n\n    def parse_argument(self, stream: TokenStream) -> WithKeywordArg:\n        key = str(parse_unchained_identifier(stream))\n        stream.next_token()\n\n        expect(stream, TOKEN_COLON)\n        stream.next_token()  # Eat colon\n\n        val = parse_expression(stream)\n        stream.next_token()\n\n        return WithKeywordArg(key, val)\n\n# ...\n")),(0,i.kt)("h3",{id:"example-node"},"Example Node"),(0,i.kt)("p",null,"Every ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node"))," must implement a ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/node#rendertooutput"},(0,i.kt)("inlineCode",{parentName:"a"},"render_to_output()"))," method and, optionally, a ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/node#rendertooutputasync"},(0,i.kt)("inlineCode",{parentName:"a"},"render_to_output_async()"))," method. By referencing its ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression"),"'s and the active render context, ",(0,i.kt)("inlineCode",{parentName:"p"},"render_to_output()")," is responsible for writing text to the output buffer."),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"WithNode")," simply evaluates each of its arguments and uses the results to extend the scope of the active render context before rendering its block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="with_tag.py (continued)"',title:'"with_tag.py','(continued)"':!0},"class WithNode(Node):\n    def __init__(self, tok: Token, args: Dict[str, Expression], block: BlockNode):\n        self.tok = tok\n        self.args = args\n        self.block = block\n\n    def render_to_output(self, context: Context, buffer: TextIO) -> Optional[bool]:\n        namespace = {k: v.evaluate(context) for k, v in self.args.items()}\n\n        with context.extend(namespace):\n            self.block.render(context, buffer)\n\n")),(0,i.kt)("h3",{id:"example-tag-usage"},"Example Tag Usage"),(0,i.kt)("p",null,"We can add ",(0,i.kt)("inlineCode",{parentName:"p"},"WithTag")," tag to an ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment"))," like this. Notice that ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment#addtag"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment.add_tag()"))," takes a class, not a class instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom with_tag import WithTag\n\nenv = Environment()\nenv.add_tag(WithTag)\n\ntemplate = env.from_string(\n    "{% with greeting: \'Hello\', name: \'Sally\' -%}"\n    "  {{ greeting }}, {{ name }}!"\n    "{%- endwith %}"\n)\n\nprint(template.render()) # Hello, Sally\n')),(0,i.kt)("h2",{id:"replace-a-tag"},"Replace a Tag"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment#add_tag"},"Environment.add_tag()")," registers a tag using the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," property\ndefined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," class. If you register a tag with the same name as an existing tag, it will be replaced without warning."),(0,i.kt)("p",null,"For example, the non-standard ",(0,i.kt)("a",{parentName:"p",href:"/liquid/extra/tags#if-not"},"if (not)")," tag is a drop-in replacement for the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," tag."),(0,i.kt)("h2",{id:"remove-a-tag"},"Remove a Tag"),(0,i.kt)("p",null,"Remove a tag, either built-in or custom, by deleting it from ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},"Environment.tags"),". It's a regular dictionary mapping tag names to ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," classes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nfrom liquid.builtin.tags.ifchanged_tag import IfChangedTag\n\nenv = Environment()\ndel env.filters[IfChangedTag.name]\n")))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[1984],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>_,useMDXComponents:()=>p,withMDXComponents:()=>l});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){return function(n){var t=p(n.components);return r.createElement(e,o({},n,{components:t}))}},p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),l=p(t),u=a,m=l["".concat(i,".").concat(u)]||l[u]||f[u]||o;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function _(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={},i="Async Support",s={unversionedId:"introduction/async-support",id:"introduction/async-support",title:"Async Support",description:"Python Liquid supports loading and rendering templates asynchronously. When BoundTemplate.render_async()",source:"@site/docs/introduction/async-support.md",sourceDirName:"introduction",slug:"/introduction/async-support",permalink:"/liquid/introduction/async-support",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/async-support.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"HTML Auto-Escape",permalink:"/liquid/introduction/auto-escape"},next:{title:"Caching",permalink:"/liquid/introduction/caching"}},d={},c=[{value:"Async Loaders",id:"async-loaders",level:2},{value:"Async Drops",id:"async-drops",level:2}],l={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.mdx)(p,(0,r.default)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"async-support"},"Async Support"),(0,a.mdx)("p",null,"Python Liquid supports loading and rendering templates asynchronously. When ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate"},(0,a.mdx)("inlineCode",{parentName:"a"},"BoundTemplate.render_async()")),"\nis awaited, ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/language/tags#render"},(0,a.mdx)("inlineCode",{parentName:"a"},"{% render %}"))," and ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/language/tags#include"},(0,a.mdx)("inlineCode",{parentName:"a"},"{% include %}"))," tags will use ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#get-template-async"},(0,a.mdx)("inlineCode",{parentName:"a"},"Environment.get_template_async()")),", which delegates to ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/filesystemloader#get_source_async"},(0,a.mdx)("inlineCode",{parentName:"a"},"get_source_async()"))," of the configured template loader."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'import asyncio\nfrom liquid import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\n\nasync def coro():\n    template = await env.get_template_async("index.html")\n    return await template.render_async(you="World")\n\nresult = asyncio.run(coro())\n')),(0,a.mdx)("h2",{id:"async-loaders"},"Async Loaders"),(0,a.mdx)("p",null,"Custom template loaders should implement ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/filesystemloader#get_source_async"},(0,a.mdx)("inlineCode",{parentName:"a"},"get_source_async()")),"\nand pass a coroutine as the ",(0,a.mdx)("inlineCode",{parentName:"p"},"uptodate")," argument to ",(0,a.mdx)("inlineCode",{parentName:"p"},"TemplateSource"),"."),(0,a.mdx)("p",null,"See ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/guides/custom-loaders#async-database-loader"},(0,a.mdx)("inlineCode",{parentName:"a"},"AsyncDatabaseLoader"))," for an example that loads\ntemplates from a PostgreSQL database asynchronously."),(0,a.mdx)("h2",{id:"async-drops"},"Async Drops"),(0,a.mdx)("p",null,"Custom ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/introduction/objects-and-drops"},"drops")," can implement ",(0,a.mdx)("inlineCode",{parentName:"p"},"__getitem_async__()"),". If an instance of a drop that implements ",(0,a.mdx)("inlineCode",{parentName:"p"},"__getitem_async__()")," appears in a ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate#render_async"},(0,a.mdx)("inlineCode",{parentName:"a"},"render_async()"))," context, ",(0,a.mdx)("inlineCode",{parentName:"p"},"__getitem_async__()")," will be awaited instead of calling ",(0,a.mdx)("inlineCode",{parentName:"p"},"__getitem__()"),"."),(0,a.mdx)("p",null,"Most likely used for lazy loading objects from a database, an async drop could look something like this."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'class AsyncCollection(abc.Mapping):\n    def __init__(self, val):\n        self.keys = ["products"]\n        self.cached_products = []\n\n    def __len__(self):\n        return 1\n\n    def __iter__(self):\n        return iter(self["products"])\n\n    async def __aiter__(self):\n        # Note that Liquid\'s built-in `for` loop does not yet support async iteration.\n        return iter(self.__getitem_async__("products"))\n\n    def __getitem__(self, k):\n        if not self.cached_products:\n            # Blocking IO here\n            self.cached_products = get_stuff_from_database()\n        return self.cache_products\n\n    async def __getitem_async__(self, k):\n        if not self.cached_products:\n            # Do async IO here.\n            self.cached_products = await get_stuff_from_database_async()\n        return self.cache_products\n')))}u.isMDXComponent=!0}}]);
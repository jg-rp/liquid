"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[6698],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=l,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const i={},r="Liquid Tags",o={unversionedId:"language/tags",id:"language/tags",title:"Liquid Tags",description:"This page documents standard tags that are available with every Environment by default. See custom tags for examples of how to write your own and the extra tag reference for some non-standard tags.",source:"@site/docs/language/tags.md",sourceDirName:"language",slug:"/language/tags",permalink:"/liquid/language/tags",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/language/tags.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Liquid Filters",permalink:"/liquid/language/filters"},next:{title:"Extra Tags and Filters",permalink:"/liquid/extra/introduction"}},p={},s=[{value:"<code>#</code> (inline comment)",id:"-inline-comment",level:2},{value:"assign",id:"assign",level:2},{value:"capture",id:"capture",level:2},{value:"case",id:"case",level:2},{value:"comment",id:"comment",level:2},{value:"cycle",id:"cycle",level:2},{value:"decrement",id:"decrement",level:2},{value:"echo",id:"echo",level:2},{value:"for",id:"for",level:2},{value:"break",id:"break",level:3},{value:"continue",id:"continue",level:3},{value:"else",id:"else",level:3},{value:"forloop",id:"forloop",level:3},{value:"forloop.parentloop",id:"forloopparentloop",level:3},{value:"limit",id:"limit",level:3},{value:"offset",id:"offset",level:3},{value:"offset: continue",id:"offset-continue",level:3},{value:"reversed",id:"reversed",level:3},{value:"range",id:"range",level:3},{value:"if",id:"if",level:2},{value:"Expressions",id:"expressions",level:3},{value:"Comparison Operators",id:"comparison-operators",level:4},{value:"Logical Operators",id:"logical-operators",level:4},{value:"Membership Operators",id:"membership-operators",level:4},{value:"Truthy and Falsy",id:"truthy-and-falsy",level:3},{value:"ifchanged",id:"ifchanged",level:2},{value:"include",id:"include",level:2},{value:"for / as",id:"for--as",level:3},{value:"with / as",id:"with--as",level:3},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"increment",id:"increment",level:2},{value:"liquid",id:"liquid",level:2},{value:"raw",id:"raw",level:2},{value:"render",id:"render",level:2},{value:"for / as",id:"for--as-1",level:3},{value:"with / as",id:"with--as-1",level:3},{value:"Keyword Arguments",id:"keyword-arguments-1",level:3},{value:"tablerow",id:"tablerow",level:2},{value:"cols",id:"cols",level:3},{value:"limit",id:"limit-1",level:3},{value:"offset",id:"offset-1",level:3},{value:"tablerowloop",id:"tablerowloop",level:3},{value:"unless",id:"unless",level:2}],d={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"liquid-tags"},"Liquid Tags"),(0,l.kt)("p",null,"This page documents standard tags that are available with every ",(0,l.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,l.kt)("inlineCode",{parentName:"a"},"Environment"))," by default. See ",(0,l.kt)("a",{parentName:"p",href:"/liquid/guides/custom-tags"},"custom tags")," for examples of how to write your own and the ",(0,l.kt)("a",{parentName:"p",href:"/liquid/extra/tags"},"extra tag reference")," for some non-standard tags."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Some of the examples here are borrowed from ",(0,l.kt)("a",{parentName:"p",href:"https://shopify.github.io/liquid/"},"Shopify's Liquid documentation"),".\nYou can find their license ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Shopify/liquid/blob/master/LICENSE"},"here"),".")),(0,l.kt)("h2",{id:"-inline-comment"},(0,l.kt)("inlineCode",{parentName:"h2"},"#")," (inline comment)"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% # ... %}")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"New in Python Liquid version 1.2.0")),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"New in Ruby Liquid version 5.4.0"))),(0,l.kt)("p",null,"Comment out one or more lines with a single inline tag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% # This is a comment %}\n{%-\n  # Comments can span multiple lines,\n  # but every line must start with a hash.\n-%}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"")),(0,l.kt)("p",null,"Inside ",(0,l.kt)("a",{parentName:"p",href:"#liquid"},"liquid")," tags, any line starting with a hash will be considered a comment."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% liquid\n  # This is a comment\n  echo "Hello"\n%}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello\n")),(0,l.kt)("p",null,"You can't comment out other Liquid tags using an inline comment."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{%- # {% echo 'Hello, World!' %} -%}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'}," -%}\n")),(0,l.kt)("h2",{id:"assign"},"assign"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% assign <identifier> = <primitive,identifier> [| <filter> [| <filter> ... ]] %}")),(0,l.kt)("p",null,"Set the value of a named variable for later use."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign some_variable = false %}\n{%- if some_variable != true -%}\nLets go!\n{%- endif -%}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Lets go!\n")),(0,l.kt)("h2",{id:"capture"},"capture"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% capture <identifier> %} <literal,statement,tag> ... {% endcapture %}")),(0,l.kt)("p",null,"Set the value of a named variable by rendering and capturing the tag's block. ",(0,l.kt)("inlineCode",{parentName:"p"},"capture")," blocks can\ncontain any number of other tags and/or statements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign favorite_food = "pizza" -%}\n{% assign age = 35 -%}\n\n{% capture about_me -%}\nI am {{ age }} and my favorite food is {{ favorite_food }}.\n{%- endcapture -%}\n\n{{ about_me }}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"I am 35 and my favourite food is pizza.\n")),(0,l.kt)("h2",{id:"case"},"case"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain"},"{% case <identifier> %}\n  [ {% when <primitive,identifier> %} <literal,statement,tag> ... ] ...\n  [ {% else %} <literal,statement,tag> ... ]\n{% endcase %}\n")),(0,l.kt)("p",null,"Switch on a variable, executing a block of code when the ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," expression is equal to one or more\n",(0,l.kt)("inlineCode",{parentName:"p"},"when")," expressions, or the optional ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," block if no ",(0,l.kt)("inlineCode",{parentName:"p"},"when")," expressions match."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign handle = "cake" %}\n{% case handle %}\n  {% when "cake" %}\n     This is a cake\n  {% when "cookie", "biscuit" %}\n     This is a cookie\n  {% else %}\n     This is not a cake nor a cookie\n{% endcase %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"This is a cake\n")),(0,l.kt)("p",null,"If multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"when")," expression match the ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," expression, multiple blocks will be evaluated (or\neven the same block multiple time, in some cases)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign handle = "cake" %}\n{% assign favorite = "cake" %}\n{% case handle %}\n  {% when "cake" %}\n    This is a cake\n  {% when "cookie", "biscuit" %}\n    This is a cookie\n  {% when favorite %}\n    This is my favorite\n  {% else %}\n    This is not a cake nor a cookie\n{% endcase %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"This is a cake\nThis is my favorite\n")),(0,l.kt)("h2",{id:"comment"},"comment"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% comment %} ... {% endcomment %}")),(0,l.kt)("p",null,"Mark a block of template text as a comment. Comment blocks are never evaluated or rendered."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign verb = "turned" %}\n{% comment %}\n{% assign verb = "converted" %}\n{% endcomment %}\nAnything you put between {% comment %} and {% endcomment %} tags\nis {{ verb }} into a comment.\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"\n\nAnything you put between  tags\nis turned into a comment.\n")),(0,l.kt)("h2",{id:"cycle"},"cycle"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% cycle [ <string>: ] object [, object ... ] %}")),(0,l.kt)("p",null,"Yield the next in a sequence of objects each time ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle")," appears. When the sequence is exhausted, it will start again from the beginning."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Ruby Liquid's documentation says ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle")," must be used within a ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," loop. Running the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/golden-liquid"},"golden-liquid")," test suit against Ruby Liquid suggests this is not the case. ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle")," tags in Python Liquid do not require a ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," loop.")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"While Python Liquid will accept ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle"),' arguments of any type, including identifiers to be resolved, this behavior is considered "unintended" or "undefined" in Ruby Liquid (see ',(0,l.kt)("a",{parentName:"p",href:"https://github.com/Shopify/liquid/issues/1519"},"issue #1519"),"). If you need interoperability between Python Liquid and Ruby Liquid, only use strings or numbers as arguments to ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"one\ntwo\nthree\none\n")),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle")," arguments differ, a new iterator is created."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% cycle "one", "two", "three" %}\n{% cycle "one", "two" %}\n{% cycle 1, 2 %}\n{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"one\none\n1\ntwo\nthree\none\n")),(0,l.kt)("p",null,"You can give ",(0,l.kt)("inlineCode",{parentName:"p"},"cycle")," a name to further distinguish multiple iterators with the same items."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% cycle "one", "two", "three" %}\n{% cycle "foo": "one", "two", "three" %}\n{% cycle "foo": "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n{% cycle "one", "two", "three" %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"one\none\ntwo\ntwo\nthree\none\n")),(0,l.kt)("h2",{id:"decrement"},"decrement"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% decrement <identifier> %}")),(0,l.kt)("p",null,"Output the next value in a named counter. Starting at ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", each time ",(0,l.kt)("inlineCode",{parentName:"p"},"decrement")," appears, the\ncounter is reduced by ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," before being output."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% decrement my_counter %}\n{% decrement my_counter %}\n{% decrement my_counter %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"-1\n-2\n-3\n")),(0,l.kt)("p",null,"Named counters use a separate namespace from variables created with ",(0,l.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"capture")," tags."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign my_counter = 5 %}\n{{ my_counter }}\n{% decrement my_counter %}\n{% decrement my_counter %}\n{% decrement my_counter %}\n{{ my_counter }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"5\n-1\n-2\n-3\n5\n")),(0,l.kt)("h2",{id:"echo"},"echo"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% echo <primitive,identifier> [| <filter> [| <filter> ... ]] %}")),(0,l.kt)("p",null,"A tag equivalent to the output statement (",(0,l.kt)("inlineCode",{parentName:"p"},"{{ ... }}"),"). ",(0,l.kt)("inlineCode",{parentName:"p"},"echo")," is intended to be used inside\n",(0,l.kt)("a",{parentName:"p",href:"#liquid"},"liquid")," tags, where output statements are not allowed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "collection": {\n    "products": [{ "title": "Hat" }, { "title": "Shirt" }, { "title": "Pants" }]\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% liquid\nfor product in collection.products\n  echo product.title | capitalize\nendfor\n%}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hat\nShirt\nPants\n")),(0,l.kt)("h2",{id:"for"},"for"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain"},"{% for <identifier> in <identifier,range>\n    [ limit: <integer> ] [ offset: <integer,'continue'> ] [ reversed ] %}\n  <literal,statement,tag> ...\n  [ {% else %} <literal,statement,tag> ... ]\n{% endfor %}\n")),(0,l.kt)("p",null,"Render a block once for each item in a sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "collection": {\n    "products": [{ "title": "Hat" }, { "title": "Shirt" }, { "title": "Pants" }]\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in collection.products %}\n    {{ product.title }}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hat\nShirt\nPants\n")),(0,l.kt)("h3",{id:"break"},"break"),(0,l.kt)("p",null,"Exit a loop early with the ",(0,l.kt)("inlineCode",{parentName:"p"},"{% break %}")," tag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% for product in collection.products %}\n    {% if product.title == "Shirt" %}\n        {% break %}\n    {% endif %}\n    {{ product.title }}\n{% endfor %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hat\n")),(0,l.kt)("h3",{id:"continue"},"continue"),(0,l.kt)("p",null,"Skip all or part of a loop iteration with the ",(0,l.kt)("inlineCode",{parentName:"p"},"{% continue %}")," tag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% for product in collection.products %}\n    {% if product.title == "Shirt" %}\n        {% continue %}\n    {% endif %}\n    {{ product.title }}\n{% endfor %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hat\nPants\n")),(0,l.kt)("h3",{id:"else"},"else"),(0,l.kt)("p",null,"Render a default block if the sequence is empty or undefined."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in empty_collection %}\n    {{ product.title }}\n{% else %}\n    No products available\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"No products available\n")),(0,l.kt)("h3",{id:"forloop"},"forloop"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"forloop")," object is available inside every ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," loop block."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"The loop variable name and target identifier, separated by a hyphen."),(0,l.kt)("td",{parentName:"tr",align:null},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"length")),(0,l.kt)("td",{parentName:"tr",align:null},"The length of the sequence being iterated."),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"index")),(0,l.kt)("td",{parentName:"tr",align:null},"The 1-base index of the current iteration."),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"index0")),(0,l.kt)("td",{parentName:"tr",align:null},"The 0-base index of the current iteration."),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rindex")),(0,l.kt)("td",{parentName:"tr",align:null},"The 1-base index of the current iteration counting from the end."),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rindex0")),(0,l.kt)("td",{parentName:"tr",align:null},"The 0-base index of the current iteration counting from the end."),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"first")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the current iteration is the first, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"last")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," is the current iteration is the last, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"parentloop")),(0,l.kt)("td",{parentName:"tr",align:null},"the ",(0,l.kt)("inlineCode",{parentName:"td"},"forloop")," object of an enclosing ",(0,l.kt)("inlineCode",{parentName:"td"},"for")," loop."),(0,l.kt)("td",{parentName:"tr",align:null},"forloop")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in collection.products %}\n    {% if forloop.first %}\n      <b>{{ product.title }}</b> - {{ forloop.index0 }}\n    {% else %}\n      {{ product.title }} - {{ forloop.index0 }}\n    {% endif %}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<b>Hat</b> - 0\nShirt - 1\nPants - 2\n")),(0,l.kt)("h3",{id:"forloopparentloop"},"forloop.parentloop"),(0,l.kt)("p",null,"Access a parent ",(0,l.kt)("inlineCode",{parentName:"p"},"forloop")," object when ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," tags are nested."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% assign colors = "Red, Blue, Green" | split: ", " %}\n{% for product in collection.products %}\n  {% for color in colors %}\n    {% if forloop.parentloop.first %}\n      <b>{{ color }} {{ product.title }}</b>\n    {% else %}\n      {{ color }} {{ product.title }}\n    {% endif %}\n\n  {% endfor %}\n{% endfor %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<b>Red Hat</b>\n<b>Blue Hat</b>\n<b>Green Hat</b>\nRed Shirt\nBlue Shirt\nGreen Shirt\nRed Pants\nBlue Pants\nGreen Pants\n")),(0,l.kt)("h3",{id:"limit"},"limit"),(0,l.kt)("p",null,"If a limit is specified, the loop will stop after the given number of iterations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in collection.products limit: 2 %}\n    {{ product.title }}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hat\nShirt\n")),(0,l.kt)("h3",{id:"offset"},"offset"),(0,l.kt)("p",null,"If an offset is specified, the loop will start at the given index in the sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in collection.products offset: 1 %}\n    {{ product.title }}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Shirt\nPants\n")),(0,l.kt)("h3",{id:"offset-continue"},"offset: continue"),(0,l.kt)("p",null,"After using ",(0,l.kt)("inlineCode",{parentName:"p"},"limit"),", you can start a new loop from where the previous one left off using\n",(0,l.kt)("inlineCode",{parentName:"p"},"offset: continue"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in collection.products limit: 2 %}\n    {{ product.title }}\n{% endfor %}\n\n{% for product in collection.products offset: continue %}\n    {{ product.title }}!\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hat\nShirt\n\nPants!\n")),(0,l.kt)("h3",{id:"reversed"},"reversed"),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"reversed")," flag is given, the target sequence will be iterated in reverse order."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for product in collection.products reversed %}\n    {{ product.title }}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Pants\nShirt\nHat\n")),(0,l.kt)("h3",{id:"range"},"range"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"(<number>..<number>)")),(0,l.kt)("p",null,"Ranges are also valid sequences in for loop expressions. A range expression yields a sequence of\nintegers inclusive of start and stop."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% for i in (1..4) %}\n    {{ i }}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"1\n2\n3\n4\n")),(0,l.kt)("h2",{id:"if"},"if"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{% if <expression> %}\n  <literal,statement,tag> ...\n  [ {% elsif <expression> %} <literal,statement,tag> ... [ {% elsif <expression> %} ... ]]\n  [ {% else %} <literal,statement,tag> ... ]\n{% endif %}\n")),(0,l.kt)("p",null,"Render a block if the tag's expression evaluates to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "product": {\n    "title": "Awesome Shoes"\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% if product.title == "Awesome Shoes" %}\n  These shoes are awesome!\n{% endif %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"These shoes are awesome!\n")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," tag to render a block if the ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," expression and any ",(0,l.kt)("inlineCode",{parentName:"p"},"elsif")," expression all evaluate\nto ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% if product.title == "OK Hat" %}\n  This hat is OK.\n{% elsif product.title == "Rubbish Tie" %}\n  This tie is rubbish.\n{% else %}\n  Not sure what this is.\n{% endif %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Not sure what this is.\n")),(0,l.kt)("h3",{id:"expressions"},"Expressions"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"if")," expressions are free to use the following comparison and logical operators."),(0,l.kt)("h4",{id:"comparison-operators"},"Comparison Operators"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"==")),(0,l.kt)("td",{parentName:"tr",align:null},"Equal"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'product.title == "Nice Shoes"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!=")),(0,l.kt)("td",{parentName:"tr",align:null},"Not equal"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'user.name != "anonymous"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"product.was_price > product.price"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection.products.size < 10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">=")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than or equal to"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"user.age >= 18"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<=")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than or equal to"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"basket.size <= 0"))))),(0,l.kt)("h4",{id:"logical-operators"},"Logical Operators"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"<left> <operator> <right>")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"and")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if both left and right statements evaluate to true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"or")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if either statement evaluates to true")))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Standard Liquid does not have a logical ",(0,l.kt)("inlineCode",{parentName:"p"},"not")," operator, nor does it support grouping terms with\nparentheses. The non-standard ",(0,l.kt)("a",{parentName:"p",href:"/liquid/extra/tags#if-not"},"if (not)")," tag is a drop-in replacement that does supports a logical ",(0,l.kt)("inlineCode",{parentName:"p"},"not")," operator and grouping terms with parentheses.")),(0,l.kt)("p",null,"In Liquid, ",(0,l.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"or")," operators are right associative. Where ",(0,l.kt)("inlineCode",{parentName:"p"},"true and false and false or true"),"\nis equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"(true and (false and (false or true)))"),", evaluating to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". Python, on the\nother hand, would parse the same expression as ",(0,l.kt)("inlineCode",{parentName:"p"},"(((true and false) and false) or true)"),", evaluating\nto ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h4",{id:"membership-operators"},"Membership Operators"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"<string,array> contains <string>")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"contains")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the string on the right is a member or substring of the array or string on the left.")))),(0,l.kt)("h3",{id:"truthy-and-falsy"},"Truthy and Falsy"),(0,l.kt)("p",null,"Only ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," are falsy, everything else is truthy. Even empty strings and arrays. Compare strings and arrays to ",(0,l.kt)("inlineCode",{parentName:"p"},"empty")," to check for emptiness."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% if somearray != empty %}\n  Do something with the array.\n{% endif %}\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Unlike Python, in Liquid ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," does not equal ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," does not equal ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,l.kt)("h2",{id:"ifchanged"},"ifchanged"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% ifchanged %} <literal,statement,tag> ... {% endifchanged %}")),(0,l.kt)("p",null,"Render a block if, when rendered, it has not changed since the last occurrence of ",(0,l.kt)("inlineCode",{parentName:"p"},"ifchanged"),"."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ifchanged")," tag is an undocumented feature of Ruby Liquid. You can find the Ruby Liquid\nimplementation ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Shopify/liquid/blob/master/lib/liquid/tags/ifchanged.rb"},"here"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign greeting = "Hello" %}\n\n{% ifchanged %}\n  {{ greeting }}, World!\n{% endifchanged %}\n\n{% ifchanged %}\n  {{ greeting }}, World!\n{% endifchanged %}\n\n{% assign greeting = "Goodbye" %}\n\n{% ifchanged %}\n  {{ greeting }}, World!\n{% endifchanged %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World!\nGoodbye, World!\n")),(0,l.kt)("h2",{id:"include"},"include"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{% include <string,identifier>\n    [ ( with | for ) <identifier> [ as <identifier> ]]\n    [[,] <identifier>: <object> [, [<identifier>: <object> ... ]]]\n%}\n")),(0,l.kt)("p",null,"Render the content of a named template. The name can be a string literal or a variable containing a\nstring. The included template will share the namespace of the current template."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"include")," is not allowed inside a template rendered with ",(0,l.kt)("inlineCode",{parentName:"p"},"render"),". You should expect a\n",(0,l.kt)("inlineCode",{parentName:"p"},"DisabledTagError")," from Python Liquid if you do so.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="partial_template"',title:'"partial_template"'},"{% comment %} I'm a partial template {% endcomment %}\n{{ greeting }}, World!\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:"title=template",title:"template"},'{% assign greeting = "Hello" %}\n{% include "partial_template" %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World!\n")),(0,l.kt)("h3",{id:"for--as"},"for / as"),(0,l.kt)("p",null,"Render a template once for each item in a sequence using ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," syntax."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:"title=template",title:"template"},'{% assign greetings = "Hello, Goodbye" | split: ", " %}\n{% include "partial_template" for greetings as greeting %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World!\nGoodbye, World!\n")),(0,l.kt)("h3",{id:"with--as"},"with / as"),(0,l.kt)("p",null,"Add an object to the included template's scope. By default the object will have the same name as\nthe included template. Use ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," to change the objects name."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"When using ",(0,l.kt)("inlineCode",{parentName:"p"},"with")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"as"),", there's no functional difference to using keyword arguments.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="greeting"',title:'"greeting"'},"{% comment %} I'm a partial template {% endcomment %}\n{{ greeting }}, World!\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:"title=template",title:"template"},'{% assign greetings = "Hello, Goodbye" | split: ", " %}\n{% include "greeting" with greetings[1] %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Goodbye, World!\n")),(0,l.kt)("h3",{id:"keyword-arguments"},"Keyword Arguments"),(0,l.kt)("p",null,"Add one or more variables to the included template's scope."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="partial_template"',title:'"partial_template"'},"{% comment %} I'm a partial template {% endcomment %}\n{% for i in (1..num) %}\n  {% if i == skip %}\n    {% continue %}\n  {% endif %}\n  {{ greeting }}, World! {i}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:"title=template",title:"template"},'{% include "partial_template" greeting: "Hello", num: 3, skip: 2 %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World! 1\nHello, World! 3\n")),(0,l.kt)("h2",{id:"increment"},"increment"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% increment <identifier> %}")),(0,l.kt)("p",null,"Output the next value in a named counter. Starting at ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", each time ",(0,l.kt)("inlineCode",{parentName:"p"},"increment")," appears, the\ncounter is output, then incremented by ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% increment my_counter %}\n{% increment my_counter %}\n{% increment my_counter %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"0\n1\n2\n")),(0,l.kt)("p",null,"Named counters use a separate namespace from variables created with ",(0,l.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"capture")," tags."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign my_counter = 5 %}\n{{ my_counter }}\n{% increment my_counter %}\n{% increment my_counter %}\n{% increment my_counter %}\n{{ my_counter }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"5\n0\n1\n2\n5\n")),(0,l.kt)("h2",{id:"liquid"},"liquid"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{% liquid\n<tag name> <expression>\n[ <tag name> <expression> ... ]\n[ end<tag name> ]\n...\n%}\n")),(0,l.kt)("p",null,"Combine multiple Liquid tags in a concise, shorthand syntax. Omitting the usual tag start and end\nsequences (",(0,l.kt)("inlineCode",{parentName:"p"},"{%")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"%}"),"), each line starts with a tag name and, separated by spaces or tabs,\nfinishes with the tag's expression."),(0,l.kt)("p",null,"Output statements (",(0,l.kt)("inlineCode",{parentName:"p"},"{{ ... }}"),") are not valid inside ",(0,l.kt)("inlineCode",{parentName:"p"},"liquid")," tags. Use ",(0,l.kt)("a",{parentName:"p",href:"#echo"},"echo")," instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% liquid\nassign username = "Brian"\n\nif username\n  echo "Hello, " | append: username\nelse\n  echo "Hello, user"\nendif\n\nfor i in (1..3)\n  echo i\nendfor\n%}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, Brian123\n")),(0,l.kt)("h2",{id:"raw"},"raw"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% raw %} <literal> {% endraw %}")),(0,l.kt)("p",null,"Render text containing literal ",(0,l.kt)("inlineCode",{parentName:"p"},"{{"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"}}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"{%")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"%}")," strings. Everything inside a ",(0,l.kt)("inlineCode",{parentName:"p"},"raw")," block\nwill not be parsed as a Liquid template."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% raw %}\nIn Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not.\n{% endraw %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"\nIn Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not.\n\n")),(0,l.kt)("h2",{id:"render"},"render"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{% render <string> [ ( with | for ) <identifier> [ as <identifier> ]] [[,] <identifier>: <object> [, [<identifier>: <object> ... ]]] %}")),(0,l.kt)("p",null,"Render a named template. The template name must be a string literal. The template will be rendered\nwith its own namespace. That is, it wont have access to variables set with ",(0,l.kt)("a",{parentName:"p",href:"#assign"},"assign")," or\n",(0,l.kt)("a",{parentName:"p",href:"#capture"},"capture")," in the parent template."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"include")," is not allowed inside a template rendered with ",(0,l.kt)("inlineCode",{parentName:"p"},"render"),". You should expect a\n",(0,l.kt)("inlineCode",{parentName:"p"},"DisabledTagError")," from Python Liquid if you do so.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "product": {\n    "title": "A Hat",\n    "variants": [{ "title": "Red" }, { "title": "Blue" }]\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="partial_template"',title:'"partial_template"'},"<h4>Some Heading</h4>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'<h3>{{ product.title }}</h3>\n{% render "partial_template" %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<h3>A Hat</h3>\n<h4>Some Heading</h4>\n")),(0,l.kt)("h3",{id:"for--as-1"},"for / as"),(0,l.kt)("p",null,"Render a template once for each item in a sequence using ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," syntax."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"A ",(0,l.kt)("a",{parentName:"p",href:"#forloop"},"forloop")," object is available inside templates rendered with the ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," syntax.\n",(0,l.kt)("inlineCode",{parentName:"p"},"forloop.parentloop")," will always be undefined.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="partial_template"',title:'"partial_template"'},"<li>{{ variant.title }}</li>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'<h3>{{ product.title }}</h3>\n<ol>\n  {% render "partial_template" for product.variants as variant %}\n</ol>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<h3>A Hat</h3>\n<ol>\n  <li>Red</li>\n  <li>Blue</li>\n</ol>\n")),(0,l.kt)("h3",{id:"with--as-1"},"with / as"),(0,l.kt)("p",null,"Add an object to the rendered template's namespace using ",(0,l.kt)("inlineCode",{parentName:"p"},"with")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," syntax."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="partial_template"',title:'"partial_template"'},"<li>{{ variant.title }}</li>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'<h3>{{ product.title }}</h3>\n<ol>\n  {% render "partial_template" with product.variants[0] as variant %}\n</ol>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<h3>A Hat</h3>\n<ol>\n  <li>Red</li>\n</ol>\n")),(0,l.kt)("h3",{id:"keyword-arguments-1"},"Keyword Arguments"),(0,l.kt)("p",null,"Add one or more variables to the rendered template's scope."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="partial_template"',title:'"partial_template"'},"{% comment %} I'm a partial template {% endcomment %}\n{% for i in (1..num) %}\n  {% if i == skip %}\n    {% continue %}\n  {% endif %}\n  {{ greeting }}, World! {i}\n{% endfor %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:"title=template",title:"template"},'{% render "partial_template" greeting: "Hello", num: 3, skip: 2 %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World! 1\nHello, World! 3\n")),(0,l.kt)("h2",{id:"tablerow"},"tablerow"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain"},"{% tablerow <identifier> in <identifier,range>\n    [ cols: <integer> ] [ limit: <integer> ] [ offset: <integer> ] %}\n  <identifier>\n{% endtablerow %}\n")),(0,l.kt)("p",null,"Render HTML table row (",(0,l.kt)("inlineCode",{parentName:"p"},"<tr></tr>"),") and table data (",(0,l.kt)("inlineCode",{parentName:"p"},"<td></td>"),") elements for each item in a\nsequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "collection": {\n    "products": [\n      { "title": "Cool Shirt" },\n      { "title": "Alien Poster" },\n      { "title": "Batman Poster" },\n      { "title": "Bullseye Shirt" },\n      { "title": "Another Classic Vinyl" },\n      { "title": "Awesome Jeans" }\n    ]\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"<table>\n{% tablerow product in collection.products %}\n  {{ product.title }}\n{% endtablerow %}\n</table>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<table>\n  <tr class="row1">\n    <td class="col1">Cool Shirt</td>\n    <td class="col2">Alien Poster</td>\n    <td class="col3">Batman Poster</td>\n    <td class="col4">Bullseye Shirt</td>\n    <td class="col5">Another Classic Vinyl</td>\n    <td class="col6">Awesome Jeans</td>\n  </tr>\n</table>\n')),(0,l.kt)("h3",{id:"cols"},"cols"),(0,l.kt)("p",null,"By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"tablerow")," will output one row, and one column for each item in the sequence. Use the\n",(0,l.kt)("inlineCode",{parentName:"p"},"cols")," parameter to set the number of columns."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% tablerow product in collection.products cols:2 %}\n  {{ product.title }}\n{% endtablerow %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<table>\n  <tr class="row1">\n    <td class="col1">Cool Shirt</td>\n    <td class="col2">Alien Poster</td>\n  </tr>\n  <tr class="row2">\n    <td class="col1">Batman Poster</td>\n    <td class="col2">Bullseye Shirt</td>\n  </tr>\n  <tr class="row3">\n    <td class="col1">Another Classic Vinyl</td>\n    <td class="col2">Awesome Jeans</td>\n  </tr>\n</table>\n')),(0,l.kt)("h3",{id:"limit-1"},"limit"),(0,l.kt)("p",null,"If a limit is specified, the ",(0,l.kt)("inlineCode",{parentName:"p"},"tablerow")," loop will stop after the given number of iterations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"<table>\n{% tablerow product in collection.products limit:2 %}\n  {{ product.title }}\n{% endtablerow %}\n</table>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<table>\n  <tr class="row1">\n    <td class="col1">Cool Shirt</td>\n    <td class="col2">Alien Poster</td>\n  </tr>\n</table>\n')),(0,l.kt)("h3",{id:"offset-1"},"offset"),(0,l.kt)("p",null,"If an offset is specified, the ",(0,l.kt)("inlineCode",{parentName:"p"},"tablerow")," loop will start at the given index in the sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"<table>\n{% tablerow product in collection.products offset:4 %}\n  {{ product.title }}\n{% endtablerow %}\n</table>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<table>\n  <tr class="row1">\n    <td class="col1">Another Classic Vinyl</td>\n    <td class="col2">Awesome Jeans</td>\n  </tr>\n</table>\n')),(0,l.kt)("h3",{id:"tablerowloop"},"tablerowloop"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"tablerowloop")," object is available inside every ",(0,l.kt)("inlineCode",{parentName:"p"},"tablerow")," block."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"length")),(0,l.kt)("td",{parentName:"tr",align:null},"The length of the sequence being iterated"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"index")),(0,l.kt)("td",{parentName:"tr",align:null},"The 1-base index of the current iteration"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"index0")),(0,l.kt)("td",{parentName:"tr",align:null},"The 0-base index of the current iteration"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rindex")),(0,l.kt)("td",{parentName:"tr",align:null},"The 1-base index of the current iteration counting from the end"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rindex0")),(0,l.kt)("td",{parentName:"tr",align:null},"The 0-base index of the current iteration counting from the end"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"first")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the current iteration is the first, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," otherwise"),(0,l.kt)("td",{parentName:"tr",align:null},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"last")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," is the current iteration is the last, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," otherwise"),(0,l.kt)("td",{parentName:"tr",align:null},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"col")),(0,l.kt)("td",{parentName:"tr",align:null},"The 1-based column number"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"col0")),(0,l.kt)("td",{parentName:"tr",align:null},"The 0-based column number"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"col_first")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the current column is the first column, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," otherwise"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"col_last")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the current column is the last column, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," otherwise"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"row")),(0,l.kt)("td",{parentName:"tr",align:null},"The current row number of the table"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% tablerow product in collection.products cols:2 %}\n  {{ product.title }} - {{ tablerowloop.col0 }}\n{% endtablerow %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<table>\n  <tr class="row1">\n    <td class="col1">Cool Shirt - 0</td>\n    <td class="col2">Alien Poster - 1</td>\n  </tr>\n  <tr class="row2">\n    <td class="col1">Batman Poster - 0</td>\n    <td class="col2">Bullseye Shirt< - 1/td></td>\n  </tr>\n  <tr class="row3">\n    <td class="col1">Another Classic Vinyl - 0</td>\n    <td class="col2">Awesome Jeans - 1</td>\n  </tr>\n</table>\n')),(0,l.kt)("h2",{id:"unless"},"unless"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{% unless <expression> %}\n  <literal,statement,tag> ...\n  [ {% elsif <expression> %} <literal,statement,tag> ... [ {% elsif <expression> %} ... ]]\n  [ {% else %} <literal,statement,tag> ... ]\n{% endif %}\n")),(0,l.kt)("p",null,"Render a block if the tag's expression evaluates to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". The opposite of ",(0,l.kt)("a",{parentName:"p",href:"#if"},"if"),". See\n",(0,l.kt)("a",{parentName:"p",href:"#expressions"},"if expressions")," for details."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "product": {\n    "title": "Rubbish Hat"\n  }\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% unless product.title == "Awesome Shoes" %}\n  These shoes are not awesome.\n{% endunless %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"These shoes are not awesome.\n")),(0,l.kt)("p",null,"Use an ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," tag to define a block to render in case the ",(0,l.kt)("inlineCode",{parentName:"p"},"unless")," expression evaluates to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% unless product.title == "Rubbish Hat" %}\n  These shoes are not awesome.\n{% else %}\n  I need a new hat.\n{% endunless %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"I need a new hat.\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unless")," also supports any number of ",(0,l.kt)("inlineCode",{parentName:"p"},"elsif")," tags. Unlike an ",(0,l.kt)("inlineCode",{parentName:"p"},"unless")," expression, ",(0,l.kt)("inlineCode",{parentName:"p"},"elsif")," blocks\nare rendered if their expression evaluates to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% unless product.title == "Rubbish Hat" %}\n  These shoes are not awesome.\n{% elsif product.title == "Boring Tie" %}\n  This tie is not awesome.\n{% else %}\n  I need a new hat.\n{% endunless %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"I need a new hat.\n")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[333],{6773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var a=t(4848),r=t(8453);const i={},l="Render Context",d={id:"introduction/render-context",title:"Render Context",description:"The result of rendering a template depends on the context in which it is rendered. That is, available variables and their values, and options set on the bound Environment.",source:"@site/docs/introduction/render-context.md",sourceDirName:"introduction",slug:"/introduction/render-context",permalink:"/liquid/introduction/render-context",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/render-context.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Loading Templates",permalink:"/liquid/introduction/loading-templates"},next:{title:"Objects and Drops",permalink:"/liquid/introduction/objects-and-drops"}},o={},s=[{value:"Environment Globals",id:"environment-globals",level:2},{value:"Template Globals",id:"template-globals",level:2},{value:"Render Arguments",id:"render-arguments",level:2},{value:"Matter",id:"matter",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.useMDXComponents)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"render-context",children:"Render Context"}),"\n",(0,a.jsxs)(n.p,{children:["The result of rendering a template depends on the ",(0,a.jsx)(n.a,{href:"/liquid/api/context",children:"context"})," in which it is rendered. That is, available variables and their values, and options set on the bound ",(0,a.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,a.jsx)(n.code,{children:"Environment"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Template ",(0,a.jsx)(n.em,{children:"global"})," variables are those added to a render context by application developers. From a template author's perspective, ",(0,a.jsx)(n.em,{children:"globals"})," are read-only and are available to all templates, including those rendered with the ",(0,a.jsx)(n.a,{href:"/liquid/language/tags#render",children:(0,a.jsx)(n.code,{children:"{% render %}"})})," tag."]}),"\n",(0,a.jsxs)(n.p,{children:["Template ",(0,a.jsx)(n.em,{children:"Local"})," variables are those defined by template authors using ",(0,a.jsx)(n.a,{href:"/liquid/language/tags#assign",children:(0,a.jsx)(n.code,{children:"{% assign %}"})})," and ",(0,a.jsx)(n.a,{href:"/liquid/language/tags#capture",children:(0,a.jsx)(n.code,{children:"{% capture %}"})}),". Local variables can mask names defined in the global namespace, but never change them."]}),"\n",(0,a.jsxs)(n.p,{children:["Named counters created with ",(0,a.jsx)(n.a,{href:"/liquid/language/tags#increment",children:(0,a.jsx)(n.code,{children:"{% increment %}"})})," and ",(0,a.jsx)(n.a,{href:"/liquid/language/tags#decrement",children:(0,a.jsx)(n.code,{children:"{% decrement %}"})})," have their own namespace. Outside of ",(0,a.jsx)(n.code,{children:"increment"})," or ",(0,a.jsx)(n.code,{children:"decrement"}),", Liquid will look in the counters namespace last, after ",(0,a.jsx)(n.em,{children:"locals"})," and ",(0,a.jsx)(n.em,{children:"globals"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"environment-globals",children:"Environment Globals"}),"\n",(0,a.jsxs)(n.p,{children:["You can add ",(0,a.jsx)(n.em,{children:"global"})," variables to an environment using the ",(0,a.jsx)(n.code,{children:"globals"})," argument to the ",(0,a.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,a.jsx)(n.code,{children:"Environment"})})," constructor. ",(0,a.jsx)(n.code,{children:"globals"})," should be a dictionary (or any Mapping) mapping strings to Python objects. Environment globals are automatically added to the render context of every ",(0,a.jsx)(n.a,{href:"/liquid/api/BoundTemplate",children:(0,a.jsx)(n.code,{children:"Template"})})," created with ",(0,a.jsx)(n.a,{href:"/liquid/api/Environment#from_string",children:(0,a.jsx)(n.code,{children:"Environment.from_string()"})})," and ",(0,a.jsx)(n.a,{href:"/liquid/api/Environment#get_template",children:(0,a.jsx)(n.code,{children:"Environment.get_template()"})}),", including templates rendered with the ",(0,a.jsx)(n.a,{href:"/liquid/language/tags#render",children:"render tag"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nenv = Environment(globals={"site_name": "MySite"})\n\ntemplate = env.from_string("""\\\n<html>\n<head>\n    <title>{{ site_name }}</title>\n</head>\n</html>\n""")\n\nprint(template.render())\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"<html>\n<head>\n    <title>MySite</title>\n</head>\n</html>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"template-globals",children:"Template Globals"}),"\n",(0,a.jsxs)(n.p,{children:["Similar to ",(0,a.jsx)(n.a,{href:"#environment-globals",children:"Environment Globals"}),", you can pin global template variables to a ",(0,a.jsx)(n.a,{href:"/liquid/api/BoundTemplate",children:(0,a.jsx)(n.code,{children:"liquid.template.BoundTemplate"})}),". Globals set on a template will be merged with any set on its environment and added to each render context automatically."]}),"\n",(0,a.jsx)(n.p,{children:"If environment and template globals have conflicting names, template variables take priority over\nenvironment variables."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nenv = Environment(globals={"site_name": "MySite"})\n\nsource = """\\\n    <html>\n    <head>\n        <title>{{ site_name }} - {{ page.name }}</title>\n    </head>\n    </html>\n"""\n\ntemplate = env.from_string(source, globals={"page": {"name": "Blog"}})\nprint(template.render())\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"<html>\n<head>\n    <title>MySite - Blog</title>\n</head>\n</html>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"render-arguments",children:"Render Arguments"}),"\n",(0,a.jsxs)(n.p,{children:["Keyword arguments passed to ",(0,a.jsx)(n.a,{href:"/liquid/api/BoundTemplate#render",children:(0,a.jsx)(n.code,{children:"liquid.template.BoundTemplate.render()"})})," are also added to the ",(0,a.jsx)(n.em,{children:"global"})," namespace, although, unlike environment and template globals, they do not persist between calls to ",(0,a.jsx)(n.code,{children:"render()"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"render()"})," keyword arguments take priority over environment and template globals."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nenv = Environment(globals={"site_name": "MySite"})\n\nsource = """\\\n    <html>\n    <head>\n        <title>{{ site_name }} - {{ page.name }}</title>\n    </head>\n    <body>\n        <p>Hello, {{ user.name }}</p>\n    </body>\n    </html>\n"""\n\ntemplate = env.from_string(source, globals={"page": {"name": "Blog"}})\nprint(template.render(user = {"name": "Sally"}))\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"<html>\n<head>\n    <title>MySite - Blog</title>\n</head>\n    <body>\n        <p>Hello, Sally</p>\n    </body>\n</html>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"matter",children:"Matter"}),"\n",(0,a.jsxs)(n.p,{children:["Matter variables are those that are added to a ",(0,a.jsx)(n.a,{href:"/liquid/api/BoundTemplate",children:(0,a.jsx)(n.code,{children:"Template"})})," by a ",(0,a.jsx)(n.a,{href:"/liquid/introduction/loading-templates",children:"loader"}),". They could be from a ",(0,a.jsx)(n.a,{href:"/liquid/guides/custom-loaders#front-matter-loader",children:"front matter loader"})," or extra meta data from a ",(0,a.jsx)(n.a,{href:"/liquid/guides/custom-loaders#async-database-loader",children:"database loader"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["These, too, are merged into the ",(0,a.jsx)(n.em,{children:"global"})," context namespace, taking priority over template globals,\nbut not ",(0,a.jsx)(n.code,{children:"render()"})," keyword arguments."]})]})}function h(e={}){const{wrapper:n}={...(0,r.useMDXComponents)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.r(n),t.d(n,{MDXProvider:()=>d,useMDXComponents:()=>l});var a=t(6540);const r={},i=a.createContext(r);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);
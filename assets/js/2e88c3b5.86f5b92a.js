"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5219],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,f=p["".concat(l,".").concat(u)]||p[u]||d[u]||r;return n?i.createElement(f,o(o({ref:t},s),{},{components:n})):i.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[p]="string"==typeof e?e:a,o[1]=m;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>m,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={},o="Comments",m={unversionedId:"introduction/comments",id:"introduction/comments",title:"Comments",description:"Using the standard {% comment %} tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between {% comment %} and {% endcomment %}.",source:"@site/docs/introduction/comments.md",sourceDirName:"introduction",slug:"/introduction/comments",permalink:"/liquid/introduction/comments",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/comments.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Strictness",permalink:"/liquid/introduction/strictness"},next:{title:"HTML Auto-Escape",permalink:"/liquid/introduction/auto-escape"}},l={},c=[{value:"Alternative Comment Syntax",id:"alternative-comment-syntax",level:2}],s={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"comments"},"Comments"),(0,a.kt)("p",null,"Using the standard ",(0,a.kt)("a",{parentName:"p",href:"/liquid/language/tags#comment"},(0,a.kt)("inlineCode",{parentName:"a"},"{% comment %}"))," tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between ",(0,a.kt)("inlineCode",{parentName:"p"},"{% comment %}")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"{% endcomment %}"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% comment %} Determine if the current product is on sale. {% endcomment %}\n{% liquid\n  if product.was_price\n    assign on_sale = true\n  else\n    comment was_price is undefined\n    endcomment\n    assign on_sale = false\n  endif\n%}\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Python Liquid will raise a ",(0,a.kt)("inlineCode",{parentName:"p"},"LiquidSyntaxError")," if it finds the string ",(0,a.kt)("inlineCode",{parentName:"p"},"{% endcomment %}")," inside a comment block. Ruby Liquid, on the other hand, will successfully parse fully-formed nested comment blocks, but will fail to parse a comment block containing either a ",(0,a.kt)("inlineCode",{parentName:"p"},"{% comment %}")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"{% endcomment %}")," on its own.")),(0,a.kt)("p",null,"Similarly, with the ",(0,a.kt)("a",{parentName:"p",href:"/liquid/language/tags#inline-comment"},"inline comment tag")," added in Python Liquid version 1.2.0, one or more lines can be commented out in a single inline tag."),(0,a.kt)("p",null,"Both the traditional comment block and the newer inline comment tag suffer from problems when commenting out other liquid tags."),(0,a.kt)("h2",{id:"alternative-comment-syntax"},"Alternative Comment Syntax"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"New in version 1.1.0"))),(0,a.kt)("p",null,"Python Liquid offers an alternative, non-standard template comment syntax. When enabled, anything between ",(0,a.kt)("inlineCode",{parentName:"p"},"{#")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"#}")," will be treated as a comment. It is disabled by default. Enable it using the ",(0,a.kt)("a",{parentName:"p",href:"/liquid/api/Environment#template_comments"},(0,a.kt)("inlineCode",{parentName:"a"},"template_comments"))," argument to ",(0,a.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,a.kt)("inlineCode",{parentName:"a"},"liquid.Environment"))," or ",(0,a.kt)("a",{parentName:"p",href:"/liquid/api/Template"},(0,a.kt)("inlineCode",{parentName:"a"},"liquid.Template")),"."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This alternative comment syntax is non-standard. If you choose to use it in your templates, those\ntemplates are unlikely to render correctly with other implementations of Liquid.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nenv = Environment(template_comments=True)\n")),(0,a.kt)("p",null,"Because this comment syntax is not implemented as a tag, there are no issues commenting out\narbitrary chunks of Liquid."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{# note: comment this out for now\n  {% for x in (1..5) %}\n    {{ x }}\n  {% endfor %}\n#}\n")),(0,a.kt)("p",null,"Inside ",(0,a.kt)("a",{parentName:"p",href:"/liquid/language/tags#liquid"},(0,a.kt)("inlineCode",{parentName:"a"},"{% liquid %}"))," tags any line starting with a hash is considered a comment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% liquid\n  # greetings\n  echo 'Hello, World!'\n  # Multi line\n  # comment\n%}\n")))}d.isMDXComponent=!0}}]);
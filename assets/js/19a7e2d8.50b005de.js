"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[7280],{6400:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"extra/introduction","title":"Extra Tags and Filters","description":"_New in version 1.5.0_","source":"@site/docs/extra/introduction.md","sourceDirName":"extra","slug":"/extra/introduction","permalink":"/liquid/extra/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/jg-rp/liquid/tree/docs/docs/extra/introduction.md","tags":[],"version":"current","frontMatter":{},"sidebar":"languageSidebar","previous":{"title":"Liquid Tags","permalink":"/liquid/language/tags"},"next":{"title":"Extra Filters","permalink":"/liquid/extra/filters"}}');var r=i(4848),a=i(8453);const s={},d="Extra Tags and Filters",l={},o=[{value:"Add All Extras",id:"add-all-extras",level:2},{value:"Adding Extra Filters",id:"adding-extra-filters",level:2},{value:"Adding Extra Tags",id:"adding-extra-tags",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"extra-tags-and-filters",children:"Extra Tags and Filters"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"New in version 1.5.0"})})}),"\n",(0,r.jsxs)(n.p,{children:['Extra tags and filters are those that are not "standard", require zero additional dependencies, and are commonly useful in scenarios that don\'t require strict compatibility with Ruby Liquid. Since Python Liquid version 1.5.0, extra tags and filters are importable from the ',(0,r.jsx)(n.code,{children:"liquid.extra"})," package."]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["Prior to Python Liquid version 1.5.0, some extra tags and filters were maintained in the ",(0,r.jsx)(n.a,{href:"https://github.com/jg-rp/liquid-extra",children:"Liquid Extra repository"}),". Wherever possible, you should use extra tags and filters included in Python Liquid over those found in Liquid Extra."]}),(0,r.jsx)(n.p,{children:"Python Liquid Extra will be maintained with bug fixes, but no new features, and is expected to work with Python Liquid up to, but not including, version 2.0.0 (unreleased)."})]}),"\n",(0,r.jsxs)(n.p,{children:["Unlike ",(0,r.jsx)(n.a,{href:"/liquid/language/tags",children:"standard tags and filters"}),", which are registered for you automatically, non-standard tags and filters must be explicitly registered with an ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,r.jsx)(n.code,{children:"Environment"})}),", just like you would with ",(0,r.jsx)(n.a,{href:"/liquid/guides/custom-tags",children:"custom tags or filters"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"add-all-extras",children:"Add All Extras"}),"\n",(0,r.jsxs)(n.p,{children:["To add all extra tags and filters to a Liquid environment, with their default options, you can use the convenience function ",(0,r.jsx)(n.code,{children:"liquid.extra.add_tags_and_filters()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid.extra import add_tags_and_filters\n\nenv = Environment()\nadd_tags_and_filters(env)\n\ntemplate = env.from_string("""\\\n{% with greeting: "Hello" -%}\n  {% for person in people -%}\n    {% assign name = person.handle if person.has_handle else person.first_name | capitalize -%}\n    {% if not person.leaving %}\n      {{ greeting }}, {{ name }}\n    {% else %}\n      Goodbye, {{ name }}\n    {% endif -%}\n  {% endfor -%}\n{% endwith -%}\n""")\n\npeople = [\n    {\n        "handle": "",\n        "has_handle": False,\n        "first_name": "sue",\n        "leaving": False,\n    },\n    {\n        "handle": "MyNameIsJohn",\n        "has_handle": True,\n        "first_name": "John",\n        "leaving": True,\n    },\n]\n\nprint(template.render(people=people))\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"Hello, Sue\n\nGoodbye, MyNameIsJohn\n"})}),"\n",(0,r.jsx)(n.h2,{id:"adding-extra-filters",children:"Adding Extra Filters"}),"\n",(0,r.jsxs)(n.p,{children:["Filters can be implemented as simple functions, classes with a ",(0,r.jsx)(n.code,{children:"__call__"})," method, or closures that returns a callable object. The latter two approaches are useful if a filter is configurable, in which case it will need to be instantiated or called before registering it with an ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,r.jsx)(n.code,{children:"Environment"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the ",(0,r.jsx)(n.code,{children:"index"})," filter is a simple function, so we just pass the function object to ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment#add_filter",children:(0,r.jsx)(n.code,{children:"Environment.add_filter()"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\nenv.add_filter("index", filters.index)\n\ntemplate = env.from_string("""\\\n{{ shapes | index: \'square\' }}\n{% assign colors = "red, blue, green" | split: ", " -%}\n{{ colors | index: \'blue\' }}\n""")\n\nprint(template.render(shapes=["square", "circle", "triangle"]))\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"0\n1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Whereas the ",(0,r.jsx)(n.code,{children:"json"})," filter is a class that can be configured with a ",(0,r.jsx)(n.code,{children:"default"})," function, so it must be instantiated."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid.extra.filters import JSON\n\nenv = Environment()\nenv.add_filter("json", JSON())\n\ntemplate = env.from_string("{{ data | json }}")\n\nsome_data = {\n    "foo": [1,2,3],\n    "bar": "Hello!"\n}\n\nprint(template.render(data=some_data))\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:'\'{"foo": [1, 2, 3], "bar": "Hello!"}\'\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Refer to the ",(0,r.jsx)(n.a,{href:"/liquid/extra/filters",children:"extra filter reference"})," for examples of registering each filter and their available options."]}),"\n",(0,r.jsx)(n.h2,{id:"adding-extra-tags",children:"Adding Extra Tags"}),"\n",(0,r.jsxs)(n.p,{children:["All tags are implemented as a class inheriting from ",(0,r.jsx)(n.a,{href:"/liquid/api/Tag",children:(0,r.jsx)(n.code,{children:"liquid.tag.Tag"})}),". ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment#add_tag",children:(0,r.jsx)(n.code,{children:"Environment.add_tag()"})})," always takes a ",(0,r.jsx)(n.code,{children:"Tag"})," object, not an instance of it."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the ",(0,r.jsx)(n.a,{href:"/liquid/extra/tags#if-not",children:"if (not)"})," tag - which adds a logical ",(0,r.jsx)(n.code,{children:"not"})," operator and grouping with parentheses - would be registered as follows."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid.extra.tags import IfNotTag\n\nenv = Environment()\nenv.add_tag(IfNotTag)\n\ntemplate = env.from_string("""\\\n{% if not product.available %}\n   This product is not available.\n{% endif %}\n""")\n\nprint(template.render(product={"available": False}))\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"   This product is not available.\n"})}),"\n",(0,r.jsx)(n.p,{children:"Some tags can be configured by subclassing them and setting class variables or overriding methods."})]})}function h(e={}){const{wrapper:n}={...(0,a.useMDXComponents)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.r(n),i.d(n,{MDXProvider:()=>d,useMDXComponents:()=>s});var t=i(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[9718],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>c,mdx:()=>h,useMDXComponents:()=>d,withMDXComponents:()=>u});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){return function(n){var t=d(n.components);return r.createElement(e,a({},n,{components:t}))}},d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=d(t),c=i,m=u["".concat(s,".").concat(c)]||u[c]||f[c]||a;return t?r.createElement(m,o(o({ref:n},l),{},{components:t})):r.createElement(m,o({ref:n},l))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const a={},s="Whitespace Suppression",o={unversionedId:"guides/whitespace-suppression",id:"guides/whitespace-suppression",title:"Whitespace Suppression",description:"Block tags that, when rendered, contain only whitespace are suppressed by default.",source:"@site/docs/guides/whitespace-suppression.md",sourceDirName:"guides",slug:"/guides/whitespace-suppression",permalink:"/liquid/guides/whitespace-suppression",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/whitespace-suppression.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Undefined Variables",permalink:"/liquid/guides/undefined-variables"},next:{title:"Resource Limits",permalink:"/liquid/guides/resource-limits"}},p={},l=[{value:"Disabling Whitespace Suppression",id:"disabling-whitespace-suppression",level:2},{value:"Selective Whitespace Suppression",id:"selective-whitespace-suppression",level:2}],u={toc:l},d="wrapper";function c(e){let{components:n,...t}=e;return(0,i.mdx)(d,(0,r.default)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"whitespace-suppression"},"Whitespace Suppression"),(0,i.mdx)("p",null,"Block tags that, when rendered, contain only whitespace are suppressed by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template("Hello{% if true %}\\n\\n{% endif %}World!")\nprint(template.render())\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"HelloWorld!\n")),(0,i.mdx)("p",null,"That is unless the block contains an output statement (",(0,i.mdx)("inlineCode",{parentName:"p"},"{{ .. }}"),") or ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% echo %}")," tag, even if the result of that output is whitespace only."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"from liquid import Template\n\ntemplate = Template(\"Hello{% if true %}{{ '\\n\\n' }}{% endif %}World!\")\nprint(template.render())\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello\n\nWorld!\n")),(0,i.mdx)("h2",{id:"disabling-whitespace-suppression"},"Disabling Whitespace Suppression"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("em",{parentName:"strong"},"New in version 1.10.0"))),(0,i.mdx)("p",null,"Automatic suppression of whitespace only blocks can be disabled by subclassing ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,i.mdx)("inlineCode",{parentName:"a"},"liquid.Environment"))," and setting the class attribute ",(0,i.mdx)("inlineCode",{parentName:"p"},"render_whitespace_only_blocks")," to ",(0,i.mdx)("inlineCode",{parentName:"p"},"True"),". Templates rendered from such an environment will output blocks that contain whitespace only."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    render_whitespace_only_blocks = True\n\nenv = MyEnvironment()\ntemplate = env.from_string("Hello{% if true %}\\n\\n{% endif %}World!")\nprint(template.render())\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello\n\nWorld!\n")),(0,i.mdx)("h2",{id:"selective-whitespace-suppression"},"Selective Whitespace Suppression"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("em",{parentName:"strong"},"New in version 1.10.0"))),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"render_whitespace_only_blocks")," affects all block tags. You can disable automatic whitespace suppression for one or more tags by registering custom versions of those tags with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"force_output")," class attribute set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"True"),"."),(0,i.mdx)("p",null,"This example disables whitespace suppression for ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% unless %}")," tags, but keeps it active for ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% for %}"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% if %}")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% case %}")," tags."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid.builtin.tags.unless_tag import UnlessNode\nfrom liquid.builtin.tags.unless_tag import UnlessTag\n\nclass MyUnlessNode(UnlessNode):\n    force_output = True\n\n\nclass MyUnlessTag(UnlessTag):\n    node_class = MyUnlessNode\n\n\nenv = Environment()\nenv.add_tag(MyUnlessTag)\n\ntemplate = env.from_string(\n    "{% for x in (1..3) %}"\n    "{{ x }}"\n    "{% unless forloop.last %}\\n{% endunless %}"\n    "{% endfor %}"\n)\n\nresult = template.render() # "1\\n2\\n3"\n')))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[6820],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>s,withMDXComponents:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),p=function(e){return function(n){var t=s(n.components);return a.createElement(e,l({},n,{components:t}))}},s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,c=p["".concat(i,".").concat(u)]||p[u]||g[u]||l;return t?a.createElement(c,o(o({ref:n},d),{},{components:t})):a.createElement(c,o({ref:n},d))}));function x(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=h;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},2186:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const l={},i="Render Context",o={unversionedId:"introduction/render-context",id:"introduction/render-context",title:"Render Context",description:"The result of rendering a template depends on the context in which it is rendered. That is, available variables and their values, and options set on the bound Environment.",source:"@site/docs/introduction/render-context.md",sourceDirName:"introduction",slug:"/introduction/render-context",permalink:"/liquid/introduction/render-context",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/render-context.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Loading Templates",permalink:"/liquid/introduction/loading-templates"},next:{title:"Objects and Drops",permalink:"/liquid/introduction/objects-and-drops"}},m={},d=[{value:"Environment Globals",id:"environment-globals",level:2},{value:"Template Globals",id:"template-globals",level:2},{value:"Render Arguments",id:"render-arguments",level:2},{value:"Matter",id:"matter",level:2}],p={toc:d},s="wrapper";function u(e){let{components:n,...t}=e;return(0,r.mdx)(s,(0,a.default)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"render-context"},"Render Context"),(0,r.mdx)("p",null,"The result of rendering a template depends on the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/context"},"context")," in which it is rendered. That is, available variables and their values, and options set on the bound ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment")),"."),(0,r.mdx)("p",null,"Template ",(0,r.mdx)("em",{parentName:"p"},"global")," variables are those added to a render context by application developers. From a template author's perspective, ",(0,r.mdx)("em",{parentName:"p"},"globals")," are read-only and are available to all templates, including those rendered with the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% render %}"))," tag."),(0,r.mdx)("p",null,"Template ",(0,r.mdx)("em",{parentName:"p"},"Local")," variables are those defined by template authors using ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#assign"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% assign %}"))," and ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#capture"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% capture %}")),". Local variables can mask names defined in the global namespace, but never change them."),(0,r.mdx)("p",null,"Named counters created with ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#increment"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% increment %}"))," and ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#decrement"},(0,r.mdx)("inlineCode",{parentName:"a"},"{% decrement %}"))," have their own namespace. Outside of ",(0,r.mdx)("inlineCode",{parentName:"p"},"increment")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"decrement"),", Liquid will look in the counters namespace last, after ",(0,r.mdx)("em",{parentName:"p"},"locals")," and ",(0,r.mdx)("em",{parentName:"p"},"globals"),"."),(0,r.mdx)("h2",{id:"environment-globals"},"Environment Globals"),(0,r.mdx)("p",null,"You can add ",(0,r.mdx)("em",{parentName:"p"},"global")," variables to an environment using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"globals")," argument to the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment"))," constructor. ",(0,r.mdx)("inlineCode",{parentName:"p"},"globals")," should be a dictionary (or any Mapping) mapping strings to Python objects. Environment globals are automatically added to the render context of every ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate"},(0,r.mdx)("inlineCode",{parentName:"a"},"Template"))," created with ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#from_string"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment.from_string()"))," and ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#get_template"},(0,r.mdx)("inlineCode",{parentName:"a"},"Environment.get_template()")),", including templates rendered with the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#render"},"render tag"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nenv = Environment(globals={"site_name": "MySite"})\n\ntemplate = env.from_string("""\\\n<html>\n<head>\n    <title>{{ site_name }}</title>\n</head>\n</html>\n""")\n\nprint(template.render())\n')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<html>\n<head>\n    <title>MySite</title>\n</head>\n</html>\n")),(0,r.mdx)("h2",{id:"template-globals"},"Template Globals"),(0,r.mdx)("p",null,"Similar to ",(0,r.mdx)("a",{parentName:"p",href:"#environment-globals"},"Environment Globals"),", you can pin global template variables to a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.template.BoundTemplate")),". Globals set on a template will be merged with any set on its environment and added to each render context automatically."),(0,r.mdx)("p",null,"If environment and template globals have conflicting names, template variables take priority over\nenvironment variables."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nenv = Environment(globals={"site_name": "MySite"})\n\nsource = """\\\n    <html>\n    <head>\n        <title>{{ site_name }} - {{ page.name }}</title>\n    </head>\n    </html>\n"""\n\ntemplate = env.from_string(source, globals={"page": {"name": "Blog"}})\nprint(template.render())\n')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<html>\n<head>\n    <title>MySite - Blog</title>\n</head>\n</html>\n")),(0,r.mdx)("h2",{id:"render-arguments"},"Render Arguments"),(0,r.mdx)("p",null,"Keyword arguments passed to ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.template.BoundTemplate.render()"))," are also added to the ",(0,r.mdx)("em",{parentName:"p"},"global")," namespace, although, unlike environment and template globals, they do not persist between calls to ",(0,r.mdx)("inlineCode",{parentName:"p"},"render()"),"."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"render()")," keyword arguments take priority over environment and template globals."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nenv = Environment(globals={"site_name": "MySite"})\n\nsource = """\\\n    <html>\n    <head>\n        <title>{{ site_name }} - {{ page.name }}</title>\n    </head>\n    <body>\n        <p>Hello, {{ user.name }}</p>\n    </body>\n    </html>\n"""\n\ntemplate = env.from_string(source, globals={"page": {"name": "Blog"}})\nprint(template.render(user = {"name": "Sally"}))\n')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<html>\n<head>\n    <title>MySite - Blog</title>\n</head>\n    <body>\n        <p>Hello, Sally</p>\n    </body>\n</html>\n")),(0,r.mdx)("h2",{id:"matter"},"Matter"),(0,r.mdx)("p",null,"Matter variables are those that are added to a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/BoundTemplate"},(0,r.mdx)("inlineCode",{parentName:"a"},"Template"))," by a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/introduction/loading-templates"},"loader"),". They could be from a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/custom-loaders#front-matter-loader"},"front matter loader")," or extra meta data from a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/custom-loaders#async-database-loader"},"database loader"),"."),(0,r.mdx)("p",null,"These, too, are merged into the ",(0,r.mdx)("em",{parentName:"p"},"global")," context namespace, taking priority over template globals,\nbut not ",(0,r.mdx)("inlineCode",{parentName:"p"},"render()")," keyword arguments."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5194],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){return function(n){var t=m(n.components);return a.createElement(e,o({},n,{components:t}))}},m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(t),u=r,c=d["".concat(i,".").concat(u)]||d[u]||h[u]||o;return t?a.createElement(c,l(l({ref:n},p),{},{components:t})):a.createElement(c,l({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},i="JSONPath Tags",l={unversionedId:"jsonpath/tags",id:"jsonpath/tags",title:"JSONPath Tags",description:"This page documents tags included with the Liquid JSONPath package. See the tag reference for details of all standard tags. Also see the Python JSONPath docs for JSONPath selector syntax.",source:"@site/docs/jsonpath/tags.md",sourceDirName:"jsonpath",slug:"/jsonpath/tags",permalink:"/liquid/jsonpath/tags",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/jsonpath/tags.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"JSONPath Filters",permalink:"/liquid/jsonpath/filters"}},s={},p=[{value:"for",id:"for",level:2},{value:"Options",id:"options",level:3},{value:"Customizing JSONPath",id:"customizing-jsonpath",level:3}],d={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.mdx)(m,(0,a.default)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"jsonpath-tags"},"JSONPath Tags"),(0,r.mdx)("p",null,"This page documents tags included with the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid-jsonpath"},"Liquid JSONPath")," package. See the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags"},"tag reference")," for details of all standard tags. Also see the ",(0,r.mdx)("a",{parentName:"p",href:"https://jg-rp.github.io/python-jsonpath/syntax/"},"Python JSONPath docs")," for JSONPath selector syntax."),(0,r.mdx)("h2",{id:"for"},"for"),(0,r.mdx)("p",null,"A drop-in replacement for the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/tags#for"},"standard ",(0,r.mdx)("inlineCode",{parentName:"a"},"for")," tag")," with support for piping an iterable through a JSONPath expression."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-liquid"},"{% for name in site | '$.users[?@.score > 60].name' %}\n  {{- name }},\n{%- endfor %}\n")),(0,r.mdx)("p",null,"If the following data was assigned to a variable called ",(0,r.mdx)("inlineCode",{parentName:"p"},"site"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "users": [\n    {\n      "name": "Sue",\n      "score": 100\n    },\n    {\n      "name": "John",\n      "score": 86\n    },\n    {\n      "name": "Sally",\n      "score": 84\n    },\n    {\n      "name": "Jane",\n      "score": 55\n    }\n  ]\n}\n')),(0,r.mdx)("p",null,"We'd get an output like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Sue,John,Sally,\n")),(0,r.mdx)("h3",{id:"options"},"Options"),(0,r.mdx)("p",null,"This ",(0,r.mdx)("inlineCode",{parentName:"p"},"for")," tag defaults to an ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/undefined-variables"},"undefined")," instance when given a JSONPath and an unacceptable iterable. You can change this behavior by subclassing ",(0,r.mdx)("inlineCode",{parentName:"p"},"liquid_jsonpath.JSONPathForTag")," and setting the ",(0,r.mdx)("inlineCode",{parentName:"p"},"default")," class attribute to one of ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.EMPTY"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.RAISE")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.UNDEFINED"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nfrom liquid_jsonpath import Default\nfrom liquid_jsonpath import JSONPathForTag\n\nclass MyJSONPathForTag(JSONPathForTag):\n    default = Default.EMPTY\n\nenv = Environment()\nenv.add_tag(MyJSONPathForTag)\n# ...\n")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"Default.RAISE")," will raise a ",(0,r.mdx)("inlineCode",{parentName:"p"},"LiquidTypeError")," when given an unacceptable iterable, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.EMPTY")," will simply use an empty list instead."),(0,r.mdx)("h3",{id:"customizing-jsonpath"},"Customizing JSONPath"),(0,r.mdx)("p",null,"This ",(0,r.mdx)("inlineCode",{parentName:"p"},"for")," tag uses a ",(0,r.mdx)("a",{parentName:"p",href:"https://jg-rp.github.io/python-jsonpath/api/#jsonpath.JSONPathEnvironment"},(0,r.mdx)("inlineCode",{parentName:"a"},"JSONPathEnvironment"))," with its default configuration. You can use a custom ",(0,r.mdx)("inlineCode",{parentName:"p"},"JSONPathEnvironment")," by subclassing ",(0,r.mdx)("inlineCode",{parentName:"p"},"liquid_jsonpath.JSONPathForTag")," and setting the ",(0,r.mdx)("inlineCode",{parentName:"p"},"jsonpath_class")," class attribute."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from jsonpath import JSONPathEnvironment\nfrom liquid_jsonpath import JSONPathForTag\n\nclass MyJSONPathEnv(JSONPathEnvironment):\n    root_token = "^"  # silly example\n\nclass MyJSONPathForTag(JSONPathForTag):\n    jsonpath_class = MyJSONPathEnv\n\nenv = Environment()\nenv.add_tag(MyJSONPathForTag)\n# ...\n')))}u.isMDXComponent=!0}}]);
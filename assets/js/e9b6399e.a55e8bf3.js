"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[6303],{9481:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var t=s(4848),r=s(8453);const o={},a="Async Support",c={id:"introduction/async-support",title:"Async Support",description:"Python Liquid supports loading and rendering templates asynchronously. When BoundTemplate.render_async()",source:"@site/docs/introduction/async-support.md",sourceDirName:"introduction",slug:"/introduction/async-support",permalink:"/liquid/introduction/async-support",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/async-support.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"HTML Auto-Escape",permalink:"/liquid/introduction/auto-escape"},next:{title:"Caching",permalink:"/liquid/introduction/caching"}},i={},d=[{value:"Async Loaders",id:"async-loaders",level:2},{value:"Async Drops",id:"async-drops",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.useMDXComponents)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"async-support",children:"Async Support"}),"\n",(0,t.jsxs)(n.p,{children:["Python Liquid supports loading and rendering templates asynchronously. When ",(0,t.jsx)(n.a,{href:"/liquid/api/BoundTemplate",children:(0,t.jsx)(n.code,{children:"BoundTemplate.render_async()"})}),"\nis awaited, ",(0,t.jsx)(n.a,{href:"/liquid/language/tags#render",children:(0,t.jsx)(n.code,{children:"{% render %}"})})," and ",(0,t.jsx)(n.a,{href:"/liquid/language/tags#include",children:(0,t.jsx)(n.code,{children:"{% include %}"})})," tags will use ",(0,t.jsx)(n.a,{href:"/liquid/api/Environment#get_template_async",children:(0,t.jsx)(n.code,{children:"Environment.get_template_async()"})}),", which delegates to ",(0,t.jsx)(n.a,{href:"/liquid/api/filesystemloader#get_source_async",children:(0,t.jsx)(n.code,{children:"get_source_async()"})})," of the configured template loader."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom liquid import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\n\nasync def coro():\n    template = await env.get_template_async("index.html")\n    return await template.render_async(you="World")\n\nresult = asyncio.run(coro())\n'})}),"\n",(0,t.jsx)(n.h2,{id:"async-loaders",children:"Async Loaders"}),"\n",(0,t.jsxs)(n.p,{children:["Custom template loaders should implement ",(0,t.jsx)(n.a,{href:"/liquid/api/filesystemloader#get_source_async",children:(0,t.jsx)(n.code,{children:"get_source_async()"})}),"\nand pass a coroutine as the ",(0,t.jsx)(n.code,{children:"uptodate"})," argument to ",(0,t.jsx)(n.code,{children:"TemplateSource"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/liquid/guides/custom-loaders#async-database-loader",children:(0,t.jsx)(n.code,{children:"AsyncDatabaseLoader"})})," for an example that loads\ntemplates from a PostgreSQL database asynchronously."]}),"\n",(0,t.jsx)(n.h2,{id:"async-drops",children:"Async Drops"}),"\n",(0,t.jsxs)(n.p,{children:["Custom ",(0,t.jsx)(n.a,{href:"/liquid/introduction/objects-and-drops",children:"drops"})," can implement ",(0,t.jsx)(n.code,{children:"__getitem_async__()"}),". If an instance of a drop that implements ",(0,t.jsx)(n.code,{children:"__getitem_async__()"})," appears in a ",(0,t.jsx)(n.a,{href:"/liquid/api/BoundTemplate#render_async",children:(0,t.jsx)(n.code,{children:"render_async()"})})," context, ",(0,t.jsx)(n.code,{children:"__getitem_async__()"})," will be awaited instead of calling ",(0,t.jsx)(n.code,{children:"__getitem__()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Most likely used for lazy loading objects from a database, an async drop could look something like this."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class AsyncCollection(abc.Mapping):\n    def __init__(self, val):\n        self.keys = ["products"]\n        self.cached_products = []\n\n    def __len__(self):\n        return 1\n\n    def __iter__(self):\n        return iter(self["products"])\n\n    async def __aiter__(self):\n        # Note that Liquid\'s built-in `for` loop does not yet support async iteration.\n        return iter(self.__getitem_async__("products"))\n\n    def __getitem__(self, k):\n        if not self.cached_products:\n            # Blocking IO here\n            self.cached_products = get_stuff_from_database()\n        return self.cache_products\n\n    async def __getitem_async__(self, k):\n        if not self.cached_products:\n            # Do async IO here.\n            self.cached_products = await get_stuff_from_database_async()\n        return self.cache_products\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.useMDXComponents)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.r(n),s.d(n,{MDXProvider:()=>c,useMDXComponents:()=>a});var t=s(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);
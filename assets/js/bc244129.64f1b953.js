"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[8173],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>m,mdx:()=>g,useMDXComponents:()=>u,withMDXComponents:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){return function(n){var t=u(n.components);return a.createElement(e,i({},n,{components:t}))}},u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,c=d["".concat(o,".").concat(m)]||d[m]||f[m]||i;return t?a.createElement(c,l(l({ref:n},s),{},{components:t})):a.createElement(c,l({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9764:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={},o="JSONPath Filters",l={unversionedId:"jsonpath/filters",id:"jsonpath/filters",title:"JSONPath Filters",description:"This page documents filters included with the Liquid JSONPath package. See the filter reference for details of all standard filters. Also see the Python JSONPath docs for JSONPath selector syntax.",source:"@site/docs/jsonpath/filters.md",sourceDirName:"jsonpath",slug:"/jsonpath/filters",permalink:"/liquid/jsonpath/filters",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/jsonpath/filters.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Python Liquid JSONPath",permalink:"/liquid/jsonpath/introduction"},next:{title:"JSONPath Tags",permalink:"/liquid/jsonpath/tags"}},p={},s=[{value:"find",id:"find",level:2},{value:"Options",id:"options",level:3},{value:"Customizing JSONPath",id:"customizing-jsonpath",level:3}],d={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.mdx)(u,(0,a.default)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"jsonpath-filters"},"JSONPath Filters"),(0,r.mdx)("p",null,"This page documents filters included with the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid-jsonpath"},"Liquid JSONPath")," package. See the ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/language/filters"},"filter reference")," for details of all standard filters. Also see the ",(0,r.mdx)("a",{parentName:"p",href:"https://jg-rp.github.io/python-jsonpath/syntax/"},"Python JSONPath docs")," for JSONPath selector syntax."),(0,r.mdx)("h2",{id:"find"},"find"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"<object> | find: <string> -> <list>")),(0,r.mdx)("p",null,"Return the result of applying a ",(0,r.mdx)("em",{parentName:"p"},"jsonpath string")," to the input value. The input value should be a list (or any sequence) or a dict (or any mapping)."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ site | find: '$.users.*.name' | join: ' ' }}\n")),(0,r.mdx)("p",null,"If the following data was assigned to a variable called ",(0,r.mdx)("inlineCode",{parentName:"p"},"site"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "users": [\n    {\n      "name": "Sue",\n      "score": 100\n    },\n    {\n      "name": "John",\n      "score": 86\n    },\n    {\n      "name": "Sally",\n      "score": 84\n    },\n    {\n      "name": "Jane",\n      "score": 55\n    }\n  ]\n}\n')),(0,r.mdx)("p",null,"We'd get an output like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Sue John Sally Jane\n")),(0,r.mdx)("h3",{id:"options"},"Options"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"find")," filter defaults to returning an ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/guides/undefined-variables"},"undefined")," instance when given anything other than a mapping or sequence as its input value. You can change this behavior by setting the ",(0,r.mdx)("inlineCode",{parentName:"p"},"default")," argument to one of ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.EMPTY"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.RAISE")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.UNDEFINED")," when registering ",(0,r.mdx)("inlineCode",{parentName:"p"},"find")," with an environment."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_jsonpath import Default\nfrom liquid_jsonpath import Find\n\nenv = Environment()\nenv.add_filter("find", Find(default=Default.RAISE))\n# ...\n')),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"Default.RAISE")," will raise a ",(0,r.mdx)("inlineCode",{parentName:"p"},"FilterArgumentError")," when given an unacceptable input value or JSONPath string, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"Default.EMPTY")," will simply return an empty list instead."),(0,r.mdx)("h3",{id:"customizing-jsonpath"},"Customizing JSONPath"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"find")," filter uses a ",(0,r.mdx)("a",{parentName:"p",href:"https://jg-rp.github.io/python-jsonpath/api/#jsonpath.JSONPathEnvironment"},(0,r.mdx)("inlineCode",{parentName:"a"},"JSONPathEnvironment"))," with its default configuration. You can replace the ",(0,r.mdx)("inlineCode",{parentName:"p"},"JSONPathEnvironment")," used by ",(0,r.mdx)("inlineCode",{parentName:"p"},"find")," by subclassing ",(0,r.mdx)("inlineCode",{parentName:"p"},"liquid_jsonpath.Find")," and setting the ",(0,r.mdx)("inlineCode",{parentName:"p"},"jsonpath_class")," class attribute."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from jsonpath import JSONPathEnvironment\nfrom liquid_jsonpath import Find\n\nclass MyJSONPathEnv(JSONPathEnvironment):\n    root_token = "^"  # silly example\n\nclass MyFindFilter(Find):\n    jsonpath_class = MyJSONPathEnv\n\nenv = Environment()\nenv.add_filter("find", MyFindFilter())\n')))}m.isMDXComponent=!0}}]);
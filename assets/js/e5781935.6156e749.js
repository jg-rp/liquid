"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[4726],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>s,mdx:()=>y,useMDXComponents:()=>c,withMDXComponents:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),m=function(e){return function(t){var n=c(t.components);return r.createElement(e,o({},t,{components:n}))}},c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),s=a,d=m["".concat(i,".").concat(s)]||m[s]||f[s]||o;return n?r.createElement(d,p(p({ref:t},u),{},{components:n})):r.createElement(d,p({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2872:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i="HTML Auto-Escape",p={unversionedId:"introduction/auto-escape",id:"introduction/auto-escape",title:"HTML Auto-Escape",description:"Python Liquid offers HTML auto-escaping. Where render context variables are automatically escaped on output. Install optional dependencies for auto-escaping using the autoescape extra.",source:"@site/docs/introduction/auto-escape.md",sourceDirName:"introduction",slug:"/introduction/auto-escape",permalink:"/liquid/introduction/auto-escape",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/auto-escape.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Comments",permalink:"/liquid/introduction/comments"},next:{title:"Async Support",permalink:"/liquid/introduction/async-support"}},l={},u=[{value:"Markup",id:"markup",level:2},{value:"Safe",id:"safe",level:2}],m={toc:u},c="wrapper";function s(e){let{components:t,...n}=e;return(0,a.mdx)(c,(0,r.default)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"html-auto-escape"},"HTML Auto-Escape"),(0,a.mdx)("p",null,"Python Liquid offers HTML auto-escaping. Where render context variables are automatically escaped on output. Install optional dependencies for auto-escaping using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"autoescape")," extra."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-shell"},"$ pipenv install python-liquid[autoescape]\n")),(0,a.mdx)("p",null,"Or"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-shell"},"$ python -m pip install -U python-liquid[autoescape]\n")),(0,a.mdx)("p",null,"Auto-escaping is disabled by default. Enable it by setting the ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,a.mdx)("inlineCode",{parentName:"a"},"Environment"))," or ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/api/Template"},(0,a.mdx)("inlineCode",{parentName:"a"},"Template"))," ",(0,a.mdx)("inlineCode",{parentName:"p"},"autoescape")," argument to ",(0,a.mdx)("inlineCode",{parentName:"p"},"True"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nenv = Environment(autoescape=True)\ntemplate = env.from_string("<p>Hello, {{ you }}</p>")\nprint(template.render(you=\'</p><script>alert("XSS!");<\/script>\'))\n')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<p>Hello, &lt;/p&gt;&lt;script&gt;alert(&#34;XSS!&#34;);&lt;/script&gt;</p>\n")),(0,a.mdx)("h2",{id:"markup"},"Markup"),(0,a.mdx)("p",null,'Mark a string as "safe" by wrapping it in a ',(0,a.mdx)("inlineCode",{parentName:"p"},"Markup")," object."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, Markup\nenv = Environment(autoescape=True)\ntemplate = env.from_string("<p>Hello, {{ you }}</p>")\nprint(template.render(you=Markup("<em>World!</em>")))\n')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-plain",metastring:"title=output",title:"output"},"'<p>Hello, <em>World!</em></p>'\n")),(0,a.mdx)("h2",{id:"safe"},"Safe"),(0,a.mdx)("p",null,"Alternatively use the non-standard ",(0,a.mdx)("a",{parentName:"p",href:"/liquid/language/filters#safe"},"safe")," filter."),(0,a.mdx)("admonition",{type:"caution"},(0,a.mdx)("p",{parentName:"admonition"},"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"safe"),' filter is not available in "standard" Liquid.')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nenv = Environment(autoescape=True)\ntemplate = env.from_string("<p>Hello, {{ you | safe }}</p>")\nprint(template.render(you="<em>World!</em>"))\n')),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-plain",metastring:"title=output",title:"output"},"'<p>Hello, <em>World!</em></p>'\n")))}s.isMDXComponent=!0}}]);
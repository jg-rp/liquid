"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5670],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},l="Extra Filters",o={unversionedId:"extra/filters",id:"extra/filters",title:"Extra Filters",description:"_New in version 1.5.0_",source:"@site/docs/extra/filters.md",sourceDirName:"extra",slug:"/extra/filters",permalink:"/liquid/extra/filters",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/extra/filters.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Extra Tags and Filters",permalink:"/liquid/extra/introduction"},next:{title:"Extra Tags",permalink:"/liquid/extra/tags"}},s={},p=[{value:"index",id:"index",level:2},{value:"json",id:"json",level:2},{value:"script_tag",id:"script_tag",level:2},{value:"sort_numeric",id:"sort_numeric",level:2},{value:"stylesheet_tag",id:"stylesheet_tag",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"extra-filters"},"Extra Filters"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"New in version 1.5.0"))),(0,a.kt)("p",null,"This page documents extra filters that are not included in standard Liquid. See the ",(0,a.kt)("a",{parentName:"p",href:"/liquid/language/filters"},"filter reference")," for details of all standard filters. Each filter described here must be registered with a ",(0,a.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,a.kt)("inlineCode",{parentName:"a"},"liquid.Environment"))," to make it available to templates rendered from that environment."),(0,a.kt)("h2",{id:"index"},"index"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<array> | index: <object>")),(0,a.kt)("p",null,"Return the zero-based index of the first occurrence of the argument object in the input array. If the argument object is not in the array, ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," is returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\nenv.add_filter("index", filters.index)\n\ntemplate = env.from_string("""\\\n{% assign colors = "red, blue, green" | split: ", "%}\n{{ colors | index: \'blue\' }}\n""")\n\nprint(template.render())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"1\n")),(0,a.kt)("h2",{id:"json"},"json"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<object> | json")),(0,a.kt)("p",null,"Serialize an object as a JSON (JavaScript Object Notation) formatted string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\nenv.add_filter("json", filters.JSON())\n\ntemplate = env.from_string("""\\\n<script type="application/json">\n  {{ product | json }}\n<\/script>\n""")\n\ndata = {\n  "product": {\n    "id": 1234,\n    "name": "Football"\n  }\n}\n\nprint(template.render(**data))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=output",title:"output"},'<script type="application/json">\n  { "id": 1234, "name": "Football" }\n<\/script>\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," filter uses Python's default ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3.8/library/json.html#json.JSONEncoder"},(0,a.kt)("inlineCode",{parentName:"a"},"JSONEncoder")),", supporting ",(0,a.kt)("inlineCode",{parentName:"p"},"dict"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"tuple"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"float"),", some Enums, ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,a.kt)("p",null,"When registering the ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON")," filter, you can optionally pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," argument. ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," will be passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"json.dumps")," and should be a function that gets called for objects that can't otherwise be serialized. For example, this default function adds support for serializing ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/dataclasses.html"},"data classes"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from dataclasses import dataclass\nfrom dataclasses import asdict\nfrom dataclasses import is_dataclass\n\nfrom liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\n\ndef default(obj):\n    if is_dataclass(obj):\n        return asdict(obj)\n    raise TypeError(f"can\'t serialize object {obj}")\n\nenv.add_filter("json", filters.JSON(default=default))\n')),(0,a.kt)("h2",{id:"script_tag"},"script_tag"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<string> | script_tag")),(0,a.kt)("p",null,"Return an HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"script")," tag, as a string, with ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," equal to the input string, which should be a URL."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\nenv.add_filter("script_tag", filters.script_tag)\n\ntemplate = env.from_string("{{ url | script_tag }}")\nprint(template.render(url="https://example.com/static/app.js"))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},'<script src="https://example.com/static/app.js" type="text/javascript"><\/script>\n')),(0,a.kt)("h2",{id:"sort_numeric"},"sort_numeric"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"New in version 1.8.0"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<sequence> | sort_numeric[: <string>]")),(0,a.kt)("p",null,"Return a new list with items from the input sequence sorted by any integers and/or floats found in the string representation of each item. Note the difference between ",(0,a.kt)("inlineCode",{parentName:"p"},"sort_numeric")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sort")," in this example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\nenv.add_filter(\"sort_numeric\", filters.sort_numeric)\n\ntemplate = env.from_string(\"\"\"\\\n{% assign foo = '1.2.1, v1.10.0, v1.1.0, v1.2.2' | split: ', ' -%}\n{{ foo | sort_numeric | join: ', ' }}\n{{ foo | sort | join: ', ' }}\n\n{% assign bar = '107, 12, 0001' | split: ', ' -%}\n{{ bar | sort_numeric | join: ', ' }}\n{{ bar | sort | join: ', ' }}\n\"\"\")\n\nprint(template.render())\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"v1.1.0, 1.2.1, v1.2.2, v1.10.0\n1.2.1, v1.1.0, v1.10.0, v1.2.2\n\n0001, 12, 107\n0001, 107, 12\n")),(0,a.kt)("p",null,"The optional string argument is the name of a key/property to use as the sort key. In which case each item in the input sequence should be a dict (or any mapping), each with said key/property."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sort_numeric")," will work as expected when given lists/tuples of integers, floats and/or Decimals, but will be slower than using standard ",(0,a.kt)("inlineCode",{parentName:"p"},"sort"),"."),(0,a.kt)("p",null,"If an input sequence contains strings (or arbitrary objects that get stringified) that do not have numeric characters, they will be pushed to the end of the resulting list, probably in the same order as in the input sequence."),(0,a.kt)("h2",{id:"stylesheet_tag"},"stylesheet_tag"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<string> | stylesheet_tag")),(0,a.kt)("p",null,"Return an HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"link")," tag, as a string, with ",(0,a.kt)("inlineCode",{parentName:"p"},"href")," equal to the input string, which should be a URL."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid.extra import filters\n\nenv = Environment()\nenv.add_filter("stylesheet_tag", filters.stylesheet_tag)\n\ntemplate = env.from_string("{{ url | stylesheet_tag }}")\nprint(template.render(url="https://example.com/static/style.css"))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},'<link href="https://example.com/static/style.css" rel="stylesheet" type="text/css" media="all" />\n')))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[2754],{3375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"jsonpath/filters","title":"JSONPath Filters","description":"This page documents filters included with the Liquid JSONPath package. See the filter reference for details of all standard filters. Also see the Python JSONPath docs for JSONPath selector syntax.","source":"@site/docs/jsonpath/filters.md","sourceDirName":"jsonpath","slug":"/jsonpath/filters","permalink":"/liquid/jsonpath/filters","draft":false,"unlisted":false,"editUrl":"https://github.com/jg-rp/liquid/tree/docs/docs/jsonpath/filters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"languageSidebar","previous":{"title":"Python Liquid JSONPath","permalink":"/liquid/jsonpath/introduction"},"next":{"title":"JSONPath Tags","permalink":"/liquid/jsonpath/tags"}}');var s=t(4848),a=t(8453);const r={},o="JSONPath Filters",l={},d=[{value:"find",id:"find",level:2},{value:"Options",id:"options",level:3},{value:"Customizing JSONPath",id:"customizing-jsonpath",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.useMDXComponents)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"jsonpath-filters",children:"JSONPath Filters"})}),"\n",(0,s.jsxs)(n.p,{children:["This page documents filters included with the ",(0,s.jsx)(n.a,{href:"https://github.com/jg-rp/liquid-jsonpath",children:"Liquid JSONPath"})," package. See the ",(0,s.jsx)(n.a,{href:"/liquid/language/filters",children:"filter reference"})," for details of all standard filters. Also see the ",(0,s.jsx)(n.a,{href:"https://jg-rp.github.io/python-jsonpath/syntax/",children:"Python JSONPath docs"})," for JSONPath selector syntax."]}),"\n",(0,s.jsx)(n.h2,{id:"find",children:"find"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"<object> | find: <string> -> <list>"})}),"\n",(0,s.jsxs)(n.p,{children:["Return the result of applying a ",(0,s.jsx)(n.em,{children:"jsonpath string"})," to the input value. The input value should be a list (or any sequence) or a dict (or any mapping)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-liquid",children:"{{ site | find: '$.users.*.name' | join: ' ' }}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If the following data was assigned to a variable called ",(0,s.jsx)(n.code,{children:"site"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="data"',children:'{\n  "users": [\n    {\n      "name": "Sue",\n      "score": 100\n    },\n    {\n      "name": "John",\n      "score": 86\n    },\n    {\n      "name": "Sally",\n      "score": 84\n    },\n    {\n      "name": "Jane",\n      "score": 55\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"We'd get an output like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"Sue John Sally Jane\n"})}),"\n",(0,s.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"find"})," filter defaults to returning an ",(0,s.jsx)(n.a,{href:"/liquid/guides/undefined-variables",children:"undefined"})," instance when given anything other than a mapping or sequence as its input value. You can change this behavior by setting the ",(0,s.jsx)(n.code,{children:"default"})," argument to one of ",(0,s.jsx)(n.code,{children:"Default.EMPTY"}),", ",(0,s.jsx)(n.code,{children:"Default.RAISE"})," or ",(0,s.jsx)(n.code,{children:"Default.UNDEFINED"})," when registering ",(0,s.jsx)(n.code,{children:"find"})," with an environment."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid_jsonpath import Default\nfrom liquid_jsonpath import Find\n\nenv = Environment()\nenv.add_filter("find", Find(default=Default.RAISE))\n# ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Default.RAISE"})," will raise a ",(0,s.jsx)(n.code,{children:"FilterArgumentError"})," when given an unacceptable input value or JSONPath string, and ",(0,s.jsx)(n.code,{children:"Default.EMPTY"})," will simply return an empty list instead."]}),"\n",(0,s.jsx)(n.h3,{id:"customizing-jsonpath",children:"Customizing JSONPath"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"find"})," filter uses a ",(0,s.jsx)(n.a,{href:"https://jg-rp.github.io/python-jsonpath/api/#jsonpath.JSONPathEnvironment",children:(0,s.jsx)(n.code,{children:"JSONPathEnvironment"})})," with its default configuration. You can replace the ",(0,s.jsx)(n.code,{children:"JSONPathEnvironment"})," used by ",(0,s.jsx)(n.code,{children:"find"})," by subclassing ",(0,s.jsx)(n.code,{children:"liquid_jsonpath.Find"})," and setting the ",(0,s.jsx)(n.code,{children:"jsonpath_class"})," class attribute."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from jsonpath import JSONPathEnvironment\nfrom liquid_jsonpath import Find\n\nclass MyJSONPathEnv(JSONPathEnvironment):\n    root_token = "^"  # silly example\n\nclass MyFindFilter(Find):\n    jsonpath_class = MyJSONPathEnv\n\nenv = Environment()\nenv.add_filter("find", MyFindFilter())\n'})})]})}function c(e={}){const{wrapper:n}={...(0,a.useMDXComponents)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.r(n),t.d(n,{MDXProvider:()=>o,useMDXComponents:()=>r});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);
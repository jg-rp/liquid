"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[3152],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>o,MDXProvider:()=>s,mdx:()=>N,useMDXComponents:()=>u,withMDXComponents:()=>p});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){return function(t){var n=u(t.components);return a.createElement(e,r({},t,{components:n}))}},u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},x="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),p=u(n),s=l,x=p["".concat(d,".").concat(s)]||p[s]||c[s]||r;return n?a.createElement(x,m(m({ref:t},o),{},{components:n})):a.createElement(x,m({ref:t},o))}));function N(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,d=new Array(r);d[0]=g;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m[x]="string"==typeof e?e:l,d[1]=m;for(var o=2;o<r;o++)d[o]=n[o];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>s,frontMatter:()=>r,metadata:()=>m,toc:()=>o});var a=n(7462),l=(n(7294),n(3905));const r={},d="Babel Filters",m={unversionedId:"babel/filters",id:"babel/filters",title:"Babel Filters",description:"Optional filters provided by the liquid-babel package.",source:"@site/docs/babel/filters.md",sourceDirName:"babel",slug:"/babel/filters",permalink:"/liquid/babel/filters",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/babel/filters.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Python Liquid Babel",permalink:"/liquid/babel/introduction"},next:{title:"Babel Tags",permalink:"/liquid/babel/tags"}},i={},o=[{value:"Currency",id:"currency",level:2},{value:"Options",id:"options",level:3},{value:"Money",id:"money",level:3},{value:"DateTime",id:"datetime",level:2},{value:"Options",id:"options-1",level:3},{value:"Decimal / Number",id:"decimal--number",level:2},{value:"Options",id:"options-2",level:3},{value:"Translation",id:"translation",level:2},{value:"t",id:"t",level:3},{value:"gettext",id:"gettext",level:3},{value:"ngettext",id:"ngettext",level:3},{value:"pgettext",id:"pgettext",level:3},{value:"npgettext",id:"npgettext",level:3},{value:"Unit",id:"unit",level:2},{value:"length",id:"length",level:3},{value:"format",id:"format",level:3},{value:"Compound Units",id:"compound-units",level:3},{value:"Options",id:"options-3",level:3}],p={toc:o},u="wrapper";function s(e){let{components:t,...n}=e;return(0,l.mdx)(u,(0,a.default)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"babel-filters"},"Babel Filters"),(0,l.mdx)("p",null,"Optional ",(0,l.mdx)("a",{parentName:"p",href:"/liquid/language/filters"},"filters")," provided by the ",(0,l.mdx)("a",{parentName:"p",href:"/liquid/babel/introduction"},"liquid-babel")," package."),(0,l.mdx)("admonition",{type:"info"},(0,l.mdx)("p",{parentName:"admonition"},"Liquid Babel uses ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/python-babel/babel"},"Python Babel"),". Please refer to the ",(0,l.mdx)("a",{parentName:"p",href:"https://babel.pocoo.org/en/latest/index.html"},"Babel docs")," for more information about working with message catalogs, locales, currency codes and format strings.")),(0,l.mdx)("h2",{id:"currency"},"Currency"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<number> | currency[: group_separator: <boolean>] -> <string>")),(0,l.mdx)("p",null,"Currency (aka money) formatting. Return the input number formatted as currency for the current locale."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ 100457.99 | currency }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$100,457.99\n")),(0,l.mdx)("p",null,"Use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"group_separator")," argument to control the output of the current locale's group separators."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ 100457.99 | currency: group_separator: false }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$100457.99\n")),(0,l.mdx)("p",null,"If the input number is a string, it will be parsed to a decimal according to the current ",(0,l.mdx)("em",{parentName:"p"},"input locale"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{% with input_locale: "de", locale: "en_CA" %}\n  {{ "100.457,99" | currency }}\n{% endwith %}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"US$100,457.99\n")),(0,l.mdx)("h3",{id:"options"},"Options"),(0,l.mdx)("p",null,"Instances of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"Currency")," class default to looking for a locale in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"locale"),", and a currency code in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"currency_code"),". It outputs in the locale's standard format and falls back to ",(0,l.mdx)("inlineCode",{parentName:"p"},"en_US")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"USD")," if those context variables don't exist."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import Currency\n\nenv = Environment()\nenv.add_filter("currency", Currency())\n\ntemplate = env.from_string("{{ 100457.99 | currency }}")\n\nprint(template.render())\nprint(template.render(currency_code="GBP"))\nprint(template.render(locale="de", currency_code="CAD"))\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$100,457.99\n\xa3100,457.99\n100.457,99\xa0CA$\n")),(0,l.mdx)("p",null,"This table shows the available ",(0,l.mdx)("inlineCode",{parentName:"p"},"Currency()")," constructor arguments."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,l.mdx)("th",{parentName:"tr",align:null},"Type"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"),(0,l.mdx)("th",{parentName:"tr",align:null},"Default"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"currency_code_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current currency code."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"currency_code"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_currency_code")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback currency code if ",(0,l.mdx)("inlineCode",{parentName:"td"},"currency_code_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"USD"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"en_US"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current currency format string."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"currency_format"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_format")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Optional[str]")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback currency format that is used if ",(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")," can not be resolved. If ",(0,l.mdx)("inlineCode",{parentName:"td"},"None"),", the standard format for the current locale will be used."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"None"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"currency_digits")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"bool")),(0,l.mdx)("td",{parentName:"tr",align:null},"Indicates if the format should override locale specific trailing digit behavior."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"True"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"input_locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"input_locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_input_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"input_locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"en_US"'))))),(0,l.mdx)("h3",{id:"money"},"Money"),(0,l.mdx)("p",null,'For convenience, some "money" filters are defined that mimic Shopify\'s money filter behavior. These are instances of ',(0,l.mdx)("inlineCode",{parentName:"p"},"Currency")," with specific default formats. All other currency options are set to their defaults."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import money\nfrom liquid_babel.filters import money_with_currency\nfrom liquid_babel.filters import money_without_currency\nfrom liquid_babel.filters import money_without_trailing_zeros\n\nenv = Environment()\nenv.add_filter("money", money)\nenv.add_filter("money_with_currency", money_with_currency)\nenv.add_filter("money_without_currency", money_without_currency)\nenv.add_filter("money_without_trailing_zeros", money_without_trailing_zeros)\n\ntemplate = env.from_string("""\\\n{% assign amount = 10 %}\n{{ amount | money }}\n{{ amount | money_with_currency }}\n{{ amount | money_without_currency }}\n{{ amount | money_without_trailing_zeros }}\n""")\n\nprint(template.render(currency_code="CAD", locale="en_CA"))\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$10.00\n$10.00 CAD\n10.00\n$10\n")),(0,l.mdx)("h2",{id:"datetime"},"DateTime"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<datetime> | datetime[: format: <string>] -> <string>")),(0,l.mdx)("p",null,"Date and time formatting. Return the input ",(0,l.mdx)("em",{parentName:"p"},"datetime")," formatted according to the current locale. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"dt")," is a ",(0,l.mdx)("inlineCode",{parentName:"p"},"datetime.datetime")," object ",(0,l.mdx)("inlineCode",{parentName:"p"},"datetime.datetime(2007, 4, 1, 15, 30)"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ dt | datetime }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Apr 1, 2007, 3:30:00 PM\n")),(0,l.mdx)("p",null,"The optional ",(0,l.mdx)("inlineCode",{parentName:"p"},"format")," argument can be one of ",(0,l.mdx)("inlineCode",{parentName:"p"},"'short'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'medium'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'long'"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"'full'")," or a custom format string. ",(0,l.mdx)("inlineCode",{parentName:"p"},"format")," defaults to ",(0,l.mdx)("inlineCode",{parentName:"p"},"'medium'"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{% with timezone: 'America/New_York' %}\n  {{ dt | datetime: format: 'full' }}\n{% endwith %}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Sunday, April 1, 2007 at 11:30:00 AM Eastern Daylight Time\n")),(0,l.mdx)("p",null,"If the input ",(0,l.mdx)("em",{parentName:"p"},"datetime")," is a string, it will be parsed to a datetime object."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{% with locale: 'en_GB' %}\n  {{ \"Apr 1, 2007, 3:30:00 PM UTC+4\" | datetime: format: 'short' }}\n{% endwith %}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"01/04/2007, 19:30\n")),(0,l.mdx)("h3",{id:"options-1"},"Options"),(0,l.mdx)("p",null,"Instances of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DateTime")," class default to looking for a timezone in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"timezone"),", a locale in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"locale")," and a datetime format in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"datetime_format"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import DateTime\n\nenv = Environment()\nenv.add_filter("datetime", DateTime())\n\ntemplate = env.from_string("{{ \'Apr 1, 2007, 3:30:00 PM\' | datetime }}")\n\nprint(template.render())\nprint(template.render(locale="de", datetime_format="long"))\nprint(template.render(locale="de", timezone="CET", datetime_format="short"))\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Apr 1, 2007, 3:30:00 PM\n1. April 2007 um 15:30:00 UTC\n01.04.07, 17:30\n")),(0,l.mdx)("p",null,"This table shows the available ",(0,l.mdx)("inlineCode",{parentName:"p"},"DateTime()")," constructor arguments."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,l.mdx)("th",{parentName:"tr",align:null},"Type"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"),(0,l.mdx)("th",{parentName:"tr",align:null},"Default"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"timezone_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a timezone."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"timezone"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_timezone")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback timezone to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"timezone_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"UTC"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'en_US"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current datetime format string."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"datetime_format"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_format")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback datetime format that is used if ",(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"medium"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"input_timezone_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a timezone for parsing datetimes entered as strings."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"input_timezone"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_input_timezone")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback timezone to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"input_timezone_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"UTC"'))))),(0,l.mdx)("h2",{id:"decimal--number"},"Decimal / Number"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<number> | decimal[: group_separator: <boolean>] -> <string>")),(0,l.mdx)("p",null,"Decimal number formatting. Return the input number formatted as a decimal for the current locale."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ '10000.233' | decimal }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"10,000.233\n")),(0,l.mdx)("p",null,"Use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"group_separator")," argument to control the output of the current locale's group separators."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ '10000.233' | decimal: group_separator: false }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"10000.233\n")),(0,l.mdx)("p",null,"If the input number is a string, it will be parsed to a decimal according to the current ",(0,l.mdx)("em",{parentName:"p"},"input locale"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{% with input_locale: "de" %}\n  {{ "100.457,00" | decimal }}\n{% endwith %}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"100,457\n")),(0,l.mdx)("h3",{id:"options-2"},"Options"),(0,l.mdx)("p",null,"Instances of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"Number")," class default to looking for a locale in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"locale"),". It uses the locale's standard format and falls back to ",(0,l.mdx)("inlineCode",{parentName:"p"},"en_US")," if that variable does not exist."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import Number\n\nenv = Environment()\n# Register an instance of the `Number` class as a filter called "decimal".\nenv.add_filter("decimal", Number())\n\n# Parse a number from a string in the default (en_US) input locale.\ntemplate = env.from_string("""\\\n{{ \'10,000.23\' | decimal }}\n{{ \'10,000.23\' | decimal: group_separator: false }}\n""")\n\nprint(template.render(locale="de"))\nprint(template.render(locale="en_GB"))\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"10.000,23\n10000,23\n\n10,000.23\n10000.23\n")),(0,l.mdx)("p",null,"This table shows the available ",(0,l.mdx)("inlineCode",{parentName:"p"},"Number()")," constructor arguments."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,l.mdx)("th",{parentName:"tr",align:null},"Type"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"),(0,l.mdx)("th",{parentName:"tr",align:null},"Default"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"decimal_quantization_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the decimal quantization to be used."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"decimal_quantization"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_decimal_quantization")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"bool")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback decimal quantization if ",(0,l.mdx)("inlineCode",{parentName:"td"},"decimal_quantization_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"False"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"en_US"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current currency format string."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"decimal_format"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_format")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Optional[str]")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback currency format that is used if ",(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")," can not be resolved. If ",(0,l.mdx)("inlineCode",{parentName:"td"},"None"),", the standard format for the current locale will be used."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"None"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"input_locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"input_locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_input_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"input_locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"en_US"'))))),(0,l.mdx)("h2",{id:"translation"},"Translation"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},(0,l.mdx)("em",{parentName:"strong"},"New in Liquid Babel version 0.3.0"))),(0,l.mdx)("p",null,"Instances of the following translation filters default to looking for ",(0,l.mdx)("a",{parentName:"p",href:"/liquid/babel/introduction#message-catalogs"},"Translations")," in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"translations"),", falling back to an instance of ",(0,l.mdx)("a",{parentName:"p",href:"https://docs.python.org/3.10/library/gettext.html#the-nulltranslations-class"},(0,l.mdx)("inlineCode",{parentName:"a"},"NullTranslations"))," if ",(0,l.mdx)("inlineCode",{parentName:"p"},"translations")," can not be resolved."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import GetText\n\nenv = Environment()\n# Register an instance of the GetText filter as `t`.\nenv.add_filter("t", GetText())\n\n# You\'ll need to load an appropriate Translations object.\n# `get_translations()` is defined elsewhere.\ntranslations = get_translations(locale="de")\n\ntemplate = env.from_string("{{ \'Hello, World!\' | t }}")\nprint(template.render(translations=translations))  # Hallo Welt!\n')),(0,l.mdx)("p",null,"This table show the options available when instantiating ",(0,l.mdx)("inlineCode",{parentName:"p"},"Translate")," (aka ",(0,l.mdx)("inlineCode",{parentName:"p"},"t"),"), ",(0,l.mdx)("inlineCode",{parentName:"p"},"GetText"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"NGetText"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"PGetText")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"NPGetText")," filters."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,l.mdx)("th",{parentName:"tr",align:null},"Type"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"),(0,l.mdx)("th",{parentName:"tr",align:null},"Default"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"translations_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a ",(0,l.mdx)("inlineCode",{parentName:"td"},"Translations")," object."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"translations"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_translations")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Optional[Translations]")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback ",(0,l.mdx)("inlineCode",{parentName:"td"},"Translations")," object used if ",(0,l.mdx)("inlineCode",{parentName:"td"},"translations_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"NullTranslations"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"message_interpolation")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"bool")),(0,l.mdx)("td",{parentName:"tr",align:null},"If ",(0,l.mdx)("inlineCode",{parentName:"td"},"True"),", do percent-style variable substitution when rendering message text."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"True"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"autoescape_message")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"bool")),(0,l.mdx)("td",{parentName:"tr",align:null},"If ",(0,l.mdx)("inlineCode",{parentName:"td"},"True")," and the current environment has ",(0,l.mdx)("inlineCode",{parentName:"td"},"autoescape")," set to ",(0,l.mdx)("inlineCode",{parentName:"td"},"True"),", translatable messages will be escaped before output."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"False"))))),(0,l.mdx)("p",null,"To register all included translation filters with an environment, use ",(0,l.mdx)("inlineCode",{parentName:"p"},"register_translation_filters(env)"),". It too accepts the arguments described in the table above."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nfrom liquid_babel.filters import register_translation_filters\n\nenv = Environment()\n# Register `t`, `gettext`, `ngettext`, `pgettext` and `npgettext`\n# with HTML auto escaping enabled.\nregister_translation_filters(env, autoescape_message=True)\n")),(0,l.mdx)("h3",{id:"t"},"t"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<string> | t[: <string>[, <identifier>: <object> ... ]] -> <string>")),(0,l.mdx)("p",null,"Template internationalization. Return the localized translation of the input message. If a German ",(0,l.mdx)("a",{parentName:"p",href:"/liquid/babel/introduction#message-catalogs"},"Translations")," object is found in the current render context:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, World!" | t }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Welt!\n")),(0,l.mdx)("p",null,"If given, the first and only positional argument is a message context string. It will be used to give translators extra information about where the message is to be used. With the default configuration, keyword arguments ",(0,l.mdx)("inlineCode",{parentName:"p"},"plural")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"count")," are reserved for specifying a pluralizable message."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ \"Hello, World!\" | t: plural: 'Hello, Worlds!', count: 2 }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Welten!\n")),(0,l.mdx)("p",null,"The remaining keyword arguments are used to populate translatable message variables. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"user.name")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Sue"'),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, %(you)s" | t: you: user.name }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Sue!\n")),(0,l.mdx)("h3",{id:"gettext"},"gettext"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<string> | gettext[: <identifier>: <object> ... ]")),(0,l.mdx)("p",null,"Return the localized translation of the input message without pluralization or message context."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, World!" | gettext }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Welt!\n")),(0,l.mdx)("p",null,"Any keyword arguments are used to populate message variables. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"user.name")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Sue"'),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, %(you)s" | gettext: you: user.name }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Sue!\n")),(0,l.mdx)("h3",{id:"ngettext"},"ngettext"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<string> | ngettext: <string>, <number> [, <identifier>: <object> ... ]")),(0,l.mdx)("p",null,"Return the localized translation of the input message with pluralization. The first positional argument is the plural form of the message. The second is a number used to determine if the singular or plural message should be used."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{% assign count = "Earth,Tatooine" | split: "," | size %}\n{{ "Hello, World!" | ngetetxt: "Hello, Worlds!", count }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Welten!\n")),(0,l.mdx)("p",null,"Any keyword arguments are used to populate message variables. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"user.name")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Sue"')," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"count")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},"1"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, %(you)s" | ngetetxt: "Hello, everyone!", count, you: user.name }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Sue!\n")),(0,l.mdx)("h3",{id:"pgettext"},"pgettext"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<string> | pgettext: <string> [, <identifier>: <object> ... ]")),(0,l.mdx)("p",null,"Return the localized translation of the input message with additional message context. Message context is used to give translators extra information about where the messages is to be used."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, World!" | pgettext: "extra special greeting" }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Welt!\n")),(0,l.mdx)("p",null,"Any keyword arguments are used to populate message variables. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"user.name")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Sue"'),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, %(you)s" | pgettext: "extra special greeting", you: user.name }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Sue!\n")),(0,l.mdx)("h3",{id:"npgettext"},"npgettext"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"<string> | npgettext: <string>, <string>, <number> [, <identifier>: <object> ... ]")),(0,l.mdx)("p",null,"Return the localized translation of the input message with pluralization and a message context. The first positional argument is the message context string, the second is the plural form of the message, and the third is a number used to determine if the singular or plural message should be used."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{% assign count = "Earth,Tatooine" | split: "," | size %}\n{{ "Hello, World!" | ngetetxt: "extra special greeting", "Hello, Worlds!", count }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Welten!\n")),(0,l.mdx)("p",null,"Any keyword arguments are used to populate message variables. If ",(0,l.mdx)("inlineCode",{parentName:"p"},"user.name")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},'"Sue"')," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"count")," is ",(0,l.mdx)("inlineCode",{parentName:"p"},"1"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello, %(you)s" | ngetetxt: "extra special greeting", "Hello, everyone!", count, you: user.name }}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hallo Sue!\n")),(0,l.mdx)("h2",{id:"unit"},"Unit"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},(0,l.mdx)("em",{parentName:"strong"},"New in Liquid Babel version 1.0.0"))),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},"<number> | unit: <string>\n  [, denominator: <number>]\n  [, denominator_unit: <string>]\n  [, length: <string>]\n  [, format: <string>]\n")),(0,l.mdx)("p",null,"Measurement units formatting. Return the input number formatted with the given units according to the current locale. The first, required positional argument is a ",(0,l.mdx)("a",{parentName:"p",href:"https://cldr.unicode.org/"},"CLDR")," measurement unit ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/unicode-org/cldr/blob/latest/common/validity/unit.xml"},"code"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ 12 | unit: 'length-meter' }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"12 meters\n")),(0,l.mdx)("h3",{id:"length"},"length"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"length"),' can be one of "short", "long" or "narrow", defaulting to "long".'),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ 12 | unit: 'length-meter' }}\n{{ 12 | unit: 'length-meter', length: 'short' }}\n{{ 12 | unit: 'length-meter', length: 'long' }}\n{{ 12 | unit: 'length-meter', length: 'narrow' }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"12 meters\n12 m\n12 meters\n12m\n")),(0,l.mdx)("p",null,"Or, if the current locale is set to ",(0,l.mdx)("inlineCode",{parentName:"p"},"fr"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{% with locale:\"fr\" %}\n  {{ 12 | unit: 'length-meter' }}\n  {{ 12 | unit: 'length-meter', length: 'short' }}\n  {{ 12 | unit: 'length-meter', length: 'long' }}\n  {{ 12 | unit: 'length-meter', length: 'narrow' }}\n{% endwith %}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"12\xa0m\xe8tres\n12\u202fm\n12\xa0m\xe8tres\n12m\n")),(0,l.mdx)("h3",{id:"format"},"format"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"format")," is an optional decimal format string, described in the ",(0,l.mdx)("a",{parentName:"p",href:"https://unicode.org/reports/tr35/"},"Locale Data Markup Language specification (LDML)"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ 12 | unit: 'length-meter', format: '#,##0.00' }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"12.00 meters\n")),(0,l.mdx)("h3",{id:"compound-units"},"Compound Units"),(0,l.mdx)("p",null,"If a ",(0,l.mdx)("inlineCode",{parentName:"p"},"denominator")," and/or ",(0,l.mdx)("inlineCode",{parentName:"p"},"denominator_unit")," is given, the value will be formatted as a compound unit."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{{ 150 | unit: 'kilowatt', denominator_unit: 'hour' }}\n{{ 32.5 | unit: 'ton', denominator: 15, denominator_unit: 'hour' }}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"150 kilowatts per hour\n32.5 tons per 15 hours\n")),(0,l.mdx)("p",null,"Or, if the current locale is set to ",(0,l.mdx)("inlineCode",{parentName:"p"},"fi"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-liquid"},"{% with locale:\"fi\" %}\n  {{ 150 | unit: 'kilowatt', denominator_unit: 'hour' }}\n  {{ 32.5 | unit: 'ton', denominator: 15, denominator_unit: 'hour' }}\n{% endwith %}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"150 kilowattia / tunti\n32,5 am. tonnia/15 tuntia\n")),(0,l.mdx)("h3",{id:"options-3"},"Options"),(0,l.mdx)("p",null,"Instances of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"Unit")," class default to looking for a locale in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"locale"),", a length in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"unit_length"),", and a decimal format in a render context variable called ",(0,l.mdx)("inlineCode",{parentName:"p"},"unit_format"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import Unit\n\nenv = Environment()\nenv.add_filter("unit", Unit())\n\ntemplate = env.from_string("""\\\n  {{ 12 | unit: \'length-meter\', format: \'#,##0.00\' }}\n  {{ 150 | unit: \'kilowatt\', denominator_unit: \'hour\' }}\n""")\n\nprint(template.render(unit_length="long"))\nprint(template.render(locale="de", unit_length="long"))\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"12.00 meters\n150 kilowatts per hour\n\n12,00 Meter\n150 Kilowatt pro Stunde\n")),(0,l.mdx)("p",null,"This table show the available ",(0,l.mdx)("inlineCode",{parentName:"p"},"Unit()")," constructor arguments."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,l.mdx)("th",{parentName:"tr",align:null},"Type"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"),(0,l.mdx)("th",{parentName:"tr",align:null},"Default"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"length_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a unit format length."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"unit_length"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_length")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback format length to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"length_var")," can not be resolved. Should be one of ",(0,l.mdx)("inlineCode",{parentName:"td"},'"short"'),", ",(0,l.mdx)("inlineCode",{parentName:"td"},'"long"')," or ",(0,l.mdx)("inlineCode",{parentName:"td"},'"narrow"'),"."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"long"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"en_US"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current unit decimal format string."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"unit_format"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_format")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Optional[str]")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback decimal format that is used if ",(0,l.mdx)("inlineCode",{parentName:"td"},"format_var")," can not be resolved. If ",(0,l.mdx)("inlineCode",{parentName:"td"},"None"),", the standard format for the current locale will be used."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"None"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"input_locale_var")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"input_locale"'))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"default_input_locale")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"str")),(0,l.mdx)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.mdx)("inlineCode",{parentName:"td"},"input_locale_var")," can not be resolved."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},'"en_US"'))))))}s.isMDXComponent=!0}}]);
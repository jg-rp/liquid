"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[215],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>s,withMDXComponents:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),m=function(e){return function(t){var r=s(t.components);return n.createElement(e,o({},t,{components:r}))}},s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),m=s(r),c=a,u=m["".concat(i,".").concat(c)]||m[c]||f[c]||o;return r?n.createElement(u,l(l({ref:t},p),{},{components:r})):n.createElement(u,l({ref:t},p))}));function x(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},2105:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},i="liquid.loaders.FileSystemLoader",l={unversionedId:"api/filesystemloader",id:"api/filesystemloader",title:"liquid.loaders.FileSystemLoader",description:"A loader that loads templates from one or more directories on a file system.",source:"@site/docs/api/filesystemloader.md",sourceDirName:"api",slug:"/api/filesystemloader",permalink:"/liquid/api/filesystemloader",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/api/filesystemloader.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"liquid.future.Environment",permalink:"/liquid/api/future-environment"},next:{title:"liquid.loaders.FileExtensionLoader",permalink:"/liquid/api/fileextensionloader"}},d={},p=[{value:"<code>FileSystemLoader</code>",id:"filesystemloader",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>search_path</code>",id:"search_path",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>get_source</code>",id:"get_source",level:3},{value:"<code>get_source_async</code>",id:"get_source_async",level:3}],m={toc:p},s="wrapper";function c(e){let{components:t,...r}=e;return(0,a.mdx)(s,(0,n.default)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"liquidloadersfilesystemloader"},"liquid.loaders.FileSystemLoader"),(0,a.mdx)("p",null,"A loader that loads templates from one or more directories on a file system."),(0,a.mdx)("h2",{id:"filesystemloader"},(0,a.mdx)("inlineCode",{parentName:"h2"},"FileSystemLoader")),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"class FileSystemLoader(search_path, encoding)")),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Parameters"),":"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},"search_path: Union[str, Path, Iterable[Union[str, Path]]]")," - One or more paths to search.")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("inlineCode",{parentName:"p"},'encoding: str = "utf-8"')," - Open template files with the given encoding. Defaults to ",(0,a.mdx)("inlineCode",{parentName:"p"},'"utf-8"'),"."))),(0,a.mdx)("h2",{id:"properties"},"Properties"),(0,a.mdx)("h3",{id:"search_path"},(0,a.mdx)("inlineCode",{parentName:"h3"},"search_path")),(0,a.mdx)("p",null,"A list of paths to search."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Type"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"List[pathlib.Path]")),(0,a.mdx)("h2",{id:"methods"},"Methods"),(0,a.mdx)("h3",{id:"get_source"},(0,a.mdx)("inlineCode",{parentName:"h3"},"get_source")),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"get_source(environment, template_name)")),(0,a.mdx)("p",null,"Searches each path in ",(0,a.mdx)("inlineCode",{parentName:"p"},"search_path"),", in turn, returning the first template source it finds."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Raises"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"liquid.exceptions.TemplateNotFound")," if a template with the given name can not be\nfound.",(0,a.mdx)("br",{parentName:"p"}),"\n",(0,a.mdx)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,a.mdx)("br",{parentName:"p"}),"\n",(0,a.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")),(0,a.mdx)("h3",{id:"get_source_async"},(0,a.mdx)("inlineCode",{parentName:"h3"},"get_source_async")),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"async get_source(environment, template_name)")),(0,a.mdx)("p",null,"An async version of ",(0,a.mdx)("a",{parentName:"p",href:"#get_source"},(0,a.mdx)("inlineCode",{parentName:"a"},"get_source()")),"."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Returns"),": The source, filename and reload function for the named template.",(0,a.mdx)("br",{parentName:"p"}),"\n",(0,a.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"liquid.loaders.TemplateSource")))}c.isMDXComponent=!0}}]);
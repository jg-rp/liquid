"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[9718],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={},s="Whitespace Suppression",o={unversionedId:"guides/whitespace-suppression",id:"guides/whitespace-suppression",title:"Whitespace Suppression",description:"Block tags that, when rendered, contain only whitespace are suppressed by default.",source:"@site/docs/guides/whitespace-suppression.md",sourceDirName:"guides",slug:"/guides/whitespace-suppression",permalink:"/liquid/guides/whitespace-suppression",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/whitespace-suppression.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Undefined Variables",permalink:"/liquid/guides/undefined-variables"},next:{title:"Resource Limits",permalink:"/liquid/guides/resource-limits"}},l={},p=[{value:"Disabling Whitespace Suppression",id:"disabling-whitespace-suppression",level:2},{value:"Selective Whitespace Suppression",id:"selective-whitespace-suppression",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"whitespace-suppression"},"Whitespace Suppression"),(0,i.kt)("p",null,"Block tags that, when rendered, contain only whitespace are suppressed by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template("Hello{% if true %}\\n\\n{% endif %}World!")\nprint(template.render())\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"HelloWorld!\n")),(0,i.kt)("p",null,"That is unless the block contains an output statement (",(0,i.kt)("inlineCode",{parentName:"p"},"{{ .. }}"),") or ",(0,i.kt)("inlineCode",{parentName:"p"},"{% echo %}")," tag, even if the result of that output is whitespace only."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Template\n\ntemplate = Template(\"Hello{% if true %}{{ '\\n\\n' }}{% endif %}World!\")\nprint(template.render())\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello\n\nWorld!\n")),(0,i.kt)("h2",{id:"disabling-whitespace-suppression"},"Disabling Whitespace Suppression"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.10.0"))),(0,i.kt)("p",null,"Automatic suppression of whitespace only blocks can be disabled by subclassing ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"liquid.Environment"))," and setting the class attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"render_whitespace_only_blocks")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),". Templates rendered from such an environment will output blocks that contain whitespace only."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    render_whitespace_only_blocks = True\n\nenv = MyEnvironment()\ntemplate = env.from_string("Hello{% if true %}\\n\\n{% endif %}World!")\nprint(template.render())\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello\n\nWorld!\n")),(0,i.kt)("h2",{id:"selective-whitespace-suppression"},"Selective Whitespace Suppression"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.10.0"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"render_whitespace_only_blocks")," affects all block tags. You can disable automatic whitespace suppression for one or more tags by registering custom versions of those tags with the ",(0,i.kt)("inlineCode",{parentName:"p"},"force_output")," class attribute set to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,i.kt)("p",null,"This example disables whitespace suppression for ",(0,i.kt)("inlineCode",{parentName:"p"},"{% unless %}")," tags, but keeps it active for ",(0,i.kt)("inlineCode",{parentName:"p"},"{% for %}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"{% if %}")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"{% case %}")," tags."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid.builtin.tags.unless_tag import UnlessNode\nfrom liquid.builtin.tags.unless_tag import UnlessTag\n\nclass MyUnlessNode(UnlessNode):\n    force_output = True\n\n\nclass MyUnlessTag(UnlessTag):\n    node_class = MyUnlessNode\n\n\nenv = Environment()\nenv.add_tag(MyUnlessTag)\n\ntemplate = env.from_string(\n    "{% for x in (1..3) %}"\n    "{{ x }}"\n    "{% unless forloop.last %}\\n{% endunless %}"\n    "{% endfor %}"\n)\n\nresult = template.render() # "1\\n2\\n3"\n')))}d.isMDXComponent=!0}}]);
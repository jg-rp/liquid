"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[8746],{6548:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/custom-filters","title":"Custom Filters","description":"In Python Liquid, a filters are implemented as a Python functions or callable classes that accept at least one argument, the left hand side of a filtered expression. The callable\'s return value will be output, assigned or piped to more filters.","source":"@site/docs/guides/custom-filters.md","sourceDirName":"guides","slug":"/guides/custom-filters","permalink":"/liquid/guides/custom-filters","draft":false,"unlisted":false,"editUrl":"https://github.com/jg-rp/liquid/tree/docs/docs/guides/custom-filters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Known Issues","permalink":"/liquid/introduction/known-issues"},"next":{"title":"Custom Tags","permalink":"/liquid/guides/custom-tags"}}');var r=i(4848),l=i(8453);const s={},a="Custom Filters",o={},d=[{value:"Add a Filter",id:"add-a-filter",level:2},{value:"With Context",id:"with-context",level:3},{value:"With Environment",id:"with-environment",level:3},{value:"Replace a Filter",id:"replace-a-filter",level:2},{value:"Remove a Filter",id:"remove-a-filter",level:2},{value:"Class-Based Filters",id:"class-based-filters",level:2},{value:"Async Filters",id:"async-filters",level:3},{value:"Filter Function Decorators",id:"filter-function-decorators",level:2},{value:"<code>@liquid_filter</code>",id:"liquid_filter",level:3},{value:"<code>@sequence_filter</code>",id:"sequence_filter",level:3},{value:"<code>@array_filter</code>",id:"array_filter",level:3},{value:"<code>@string_filter</code>",id:"string_filter",level:3},{value:"<code>@math_filter</code>",id:"math_filter",level:3},{value:"Raising Exceptions From Filter Functions",id:"raising-exceptions-from-filter-functions",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"custom-filters",children:"Custom Filters"})}),"\n",(0,r.jsxs)(n.p,{children:["In Python Liquid, a ",(0,r.jsx)(n.a,{href:"/liquid/language/introduction#filters",children:"filters"})," are implemented as a Python functions or callable classes that accept at least one argument, the left hand side of a filtered expression. The callable's return value will be output, assigned or piped to more filters."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["All built-in filters are implemented in this way, so have a look in ",(0,r.jsx)(n.a,{href:"https://github.com/jg-rp/liquid/tree/main/liquid/builtin/filters",children:"liquid/builtin/filters/"})," for examples."]})}),"\n",(0,r.jsx)(n.h2,{id:"add-a-filter",children:"Add a Filter"}),"\n",(0,r.jsxs)(n.p,{children:["Add a custom template filter to an ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,r.jsx)(n.code,{children:"Environment"})})," by calling its ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment#add_filter",children:(0,r.jsx)(n.code,{children:"add_filter()"})})," method. Here's a simple example of adding Python's ",(0,r.jsx)(n.code,{children:"str.endswith"})," as a filter function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\nenv.add_filter("endswith", str.endswith)\n'})}),"\n",(0,r.jsx)(n.p,{children:"In a template, you'd use it like this."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-liquid",children:'{% assign foo = "foobar" | endswith: "bar" %}\n{% if foo %}\n    \x3c!-- do something --\x3e\n{% endif %}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-context",children:"With Context"}),"\n",(0,r.jsxs)(n.p,{children:["Decorate filter functions with ",(0,r.jsx)(n.code,{children:"with_context"})," to have the active render context passed as a keyword argument. Notice that we can use the ",(0,r.jsx)(n.a,{href:"/liquid/api/context",children:(0,r.jsx)(n.code,{children:"context"})})," object to resolve variables that have not been passed as filter arguments."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="myfilters.py"',children:'from liquid.filter import with_context\nfrom liquid.filter import string_filter\n\n@string_filter\n@with_context\ndef link_to_tag(label, tag, *, context):\n    handle = context.resolve("handle", default="")\n    return (\n        f\'<a title="Show tag {tag}" href="/collections/{handle}/{tag}">{label}</a>\'\n    )\n'})}),"\n",(0,r.jsx)(n.p,{children:"And register it wherever you create your environment."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment, FileSystemLoader\nfrom myfilters import link_to_tag\n\nenv = Environment(loader=FileSystemLoader("templates/"))\nenv.add_filter("link_to_tag", link_to_tag)\n'})}),"\n",(0,r.jsx)(n.p,{children:"In a template, you could then use the link_to_tag filter like this."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-liquid",children:'{% if tags %}\n    <dl class="navbar">\n    <dt>Tags</dt>\n        {% for tag in collection.tags %}\n        <dd>{{ tag | link_to_tag: tag }}</dd>\n        {% endfor %}\n    </dl>\n{% endif %}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-environment",children:"With Environment"}),"\n",(0,r.jsxs)(n.p,{children:["Decorate filter functions with ",(0,r.jsx)(n.code,{children:"with_environment"})," to have the active ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,r.jsx)(n.code,{children:"Environment"})})," passed as a keyword argument. For example, the built-in ",(0,r.jsx)(n.a,{href:"../language/filters#strip_newlines",children:(0,r.jsx)(n.code,{children:"strip_newlines"})})," filter changes its return value depending on parameters set on the environment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@with_environment\n@string_filter\ndef strip_newlines(val: str, *, environment: Environment) -> str:\n    """Return the given string with all newline characters removed."""\n    if environment.autoescape:\n        val = markupsafe_escape(val)\n        return Markup(RE_LINETERM.sub("", val))\n    return RE_LINETERM.sub("", val)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"replace-a-filter",children:"Replace a Filter"}),"\n",(0,r.jsxs)(n.p,{children:["If given the name of an existing filter function, ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment#add_filter",children:(0,r.jsx)(n.code,{children:"Environment.add_filter()"})})," will replace it without warning. For example, suppose you wish to replace the ",(0,r.jsx)(n.a,{href:"/liquid/language/filters#slice",children:(0,r.jsx)(n.code,{children:"slice"})})," filter for one which uses start and stop values instead of start and length, and is a bit more forgiving in terms of allowed inputs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="myfilters.py"',children:'@liquid_filter\ndef myslice(val, start, stop = None):\n    try:\n        start = int(start)\n    except (ValueError, TypeError) as err:\n        raise FilterArgumentError(\n            f"slice expected an integer start, found {type(start).__name__}"\n        ) from err\n\n    if stop is None:\n        return val[start]\n\n    try:\n        stop = int(stop)\n    except (ValueError, TypeError) as err:\n        raise FilterArgumentError(\n            f"slice expected an integer stop, found {type(stop).__name__}"\n        ) from err\n\n    if isinstance(val, str):\n        return val[start:stop]\n\n    # `val` could be any sequence.\n    return list(val[start:stop])\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment, FileSystemLoader\nfrom myfilters import myslice\n\nenv = Environment(loader=FileSystemLoader("templates/"))\nenv.add_filter("slice", myslice)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"remove-a-filter",children:"Remove a Filter"}),"\n",(0,r.jsxs)(n.p,{children:["Remove a built-in filter by deleting it from ",(0,r.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,r.jsx)(n.code,{children:"Environment.filters"})}),". It's a regular dictionary mapping filter names to filter functions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from liquid import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\ndel env.filters["base64_decode"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"class-based-filters",children:"Class-Based Filters"}),"\n",(0,r.jsxs)(n.p,{children:["If your custom filter takes initialization arguments or needs to retain state between calls (probably not a good idea), a class-based implementation might be appropriate. Simply implement a ",(0,r.jsx)(n.a,{href:"https://docs.python.org/3/reference/datamodel.html#object.__call__",children:(0,r.jsx)(n.code,{children:"__call__"})})," method, and Python Liquid will use it when applying the filter."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, here's the implementation of a ",(0,r.jsx)(n.code,{children:"json"})," filter, that dumps the input object to a JSON formatted string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Optional\n\nfrom liquid.filter import int_arg\nfrom liquid.filter import liquid_filter\n\nclass JSON:\n    def __init__(self, default: Optional[Callable[[Any], Any]] = None):\n        self.default = default\n\n    @liquid_filter\n    def __call__(\n        self,\n        obj: object,\n        indent: Optional[object] = None,\n    ) -> str:\n        indent = int_arg(indent) if indent else None\n        return json.dumps(obj, default=self.default, indent=indent)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"async-filters",children:"Async Filters"}),"\n",(0,r.jsxs)(n.p,{children:["Since version 1.9.0, class-based filters can also implement a ",(0,r.jsx)(n.code,{children:"filter_async"})," method, which should be a coroutine. When applied in an async context, if a filter implements ",(0,r.jsx)(n.code,{children:"filter_async"}),", it will be awaited instead of calling ",(0,r.jsx)(n.code,{children:"__call__"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"filter-function-decorators",children:"Filter Function Decorators"}),"\n",(0,r.jsxs)(n.p,{children:["Although not required, built-in filter functions tend to use decorators for performing common argument manipulation and error handling. None of these decorators take any arguments, and they can all be found in ",(0,r.jsx)(n.code,{children:"liquid.filters"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"liquid_filter",children:(0,r.jsx)(n.code,{children:"@liquid_filter"})}),"\n",(0,r.jsxs)(n.p,{children:["A filter function decorator that catches any ",(0,r.jsx)(n.code,{children:"TypeError"}),"s raised from the wrapped function. If a ",(0,r.jsx)(n.code,{children:"TypeError"})," is raised, it is re-raised as a ",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterArgumentError"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"sequence_filter",children:(0,r.jsx)(n.code,{children:"@sequence_filter"})}),"\n",(0,r.jsxs)(n.p,{children:["A filter function decorator that raises a ",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterValueError"})," if the filter value\ncan not be coerced into an array-like object. Also catches any ",(0,r.jsx)(n.code,{children:"TypeError"}),"s raised from the wrapped function. If a ",(0,r.jsx)(n.code,{children:"TypeError"})," is raised, it is re-raised as a ",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterArgumentError"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This is intended to mimic the semantics of the reference implementation's ",(0,r.jsx)(n.code,{children:"InputIterator"})," class."]}),"\n",(0,r.jsx)(n.h3,{id:"array_filter",children:(0,r.jsx)(n.code,{children:"@array_filter"})}),"\n",(0,r.jsxs)(n.p,{children:["A filter function decorator that raises a ",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterValueError"})," if the filter value\nis not array-like. Also catches any ",(0,r.jsx)(n.code,{children:"TypeError"}),"s raised from the wrapped function. If a ",(0,r.jsx)(n.code,{children:"TypeError"}),"\nis raised, it is re-raised as a ",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterArgumentError"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"string_filter",children:(0,r.jsx)(n.code,{children:"@string_filter"})}),"\n",(0,r.jsxs)(n.p,{children:["A filter function decorator that converts the first positional argument to a string and catches any\n",(0,r.jsx)(n.code,{children:"TypeError"}),"s raised from the wrapped function. If a ",(0,r.jsx)(n.code,{children:"TypeError"})," is raised, it is re-raised as a\n",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterArgumentError"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"math_filter",children:(0,r.jsx)(n.code,{children:"@math_filter"})}),"\n",(0,r.jsxs)(n.p,{children:["A filter function decorator that raises a ",(0,r.jsx)(n.code,{children:"liquid.excpetions.FilterArgumentError"})," if the filter\nvalue is not, or can not be converted to, a number. Also catches any ",(0,r.jsx)(n.code,{children:"TypeError"}),"s raised from the\nwrapped function. If a ",(0,r.jsx)(n.code,{children:"TypeError"})," is raised, it is re-raised as a ",(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterArgumentError"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"raising-exceptions-from-filter-functions",children:"Raising Exceptions From Filter Functions"}),"\n",(0,r.jsxs)(n.p,{children:["In general, when raising exceptions from filter functions, those exceptions should be a subclass of\n",(0,r.jsx)(n.a,{href:"/liquid/api/exceptions#liquidexceptionsfiltererror",children:(0,r.jsx)(n.code,{children:"liquid.exceptions.FilterError"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,l.useMDXComponents)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.r(n),i.d(n,{MDXProvider:()=>a,useMDXComponents:()=>s});var t=i(6540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);
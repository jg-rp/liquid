"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5219],{5008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(5893),o=t(1151);const s={},r="Comments",a={id:"introduction/comments",title:"Comments",description:"Using the standard {% comment %} tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between {% comment %} and {% endcomment %}.",source:"@site/docs/introduction/comments.md",sourceDirName:"introduction",slug:"/introduction/comments",permalink:"/liquid/introduction/comments",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/comments.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Strictness",permalink:"/liquid/introduction/strictness"},next:{title:"HTML Auto-Escape",permalink:"/liquid/introduction/auto-escape"}},c={},d=[{value:"Alternative Comment Syntax",id:"alternative-comment-syntax",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.useMDXComponents)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(n.p,{children:["Using the standard ",(0,i.jsx)(n.a,{href:"/liquid/language/tags#comment",children:(0,i.jsx)(n.code,{children:"{% comment %}"})})," tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between ",(0,i.jsx)(n.code,{children:"{% comment %}"})," and ",(0,i.jsx)(n.code,{children:"{% endcomment %}"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{% comment %} Determine if the current product is on sale. {% endcomment %}\n{% liquid\n  if product.was_price\n    assign on_sale = true\n  else\n    comment was_price is undefined\n    endcomment\n    assign on_sale = false\n  endif\n%}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Python Liquid will raise a ",(0,i.jsx)(n.code,{children:"LiquidSyntaxError"})," if it finds the string ",(0,i.jsx)(n.code,{children:"{% endcomment %}"})," inside a comment block. Ruby Liquid, on the other hand, will successfully parse fully-formed nested comment blocks, but will fail to parse a comment block containing either a ",(0,i.jsx)(n.code,{children:"{% comment %}"})," or ",(0,i.jsx)(n.code,{children:"{% endcomment %}"})," on its own."]})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, with the ",(0,i.jsx)(n.a,{href:"/liquid/language/tags#-inline-comment",children:"inline comment tag"})," added in Python Liquid version 1.2.0, one or more lines can be commented out in a single inline tag."]}),"\n",(0,i.jsx)(n.p,{children:"Both the traditional comment block and the newer inline comment tag suffer from problems when commenting out other liquid tags."}),"\n",(0,i.jsx)(n.h2,{id:"alternative-comment-syntax",children:"Alternative Comment Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"New in version 1.1.0"})})}),"\n",(0,i.jsxs)(n.p,{children:["Python Liquid offers an alternative, non-standard template comment syntax. When enabled, anything between ",(0,i.jsx)(n.code,{children:"{#"})," and ",(0,i.jsx)(n.code,{children:"#}"})," will be treated as a comment. It is disabled by default. Enable it using the ",(0,i.jsx)(n.a,{href:"/liquid/api/Environment#environment",children:(0,i.jsx)(n.code,{children:"template_comments"})})," argument to ",(0,i.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,i.jsx)(n.code,{children:"liquid.Environment"})})," or ",(0,i.jsx)(n.a,{href:"/liquid/api/Template",children:(0,i.jsx)(n.code,{children:"liquid.Template"})}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"This alternative comment syntax is non-standard. If you choose to use it in your templates, those\ntemplates are unlikely to render correctly with other implementations of Liquid."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from liquid import Environment\nenv = Environment(template_comments=True)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Because this comment syntax is not implemented as a tag, there are no issues commenting out\narbitrary chunks of Liquid."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{# note: comment this out for now\n  {% for x in (1..5) %}\n    {{ x }}\n  {% endfor %}\n#}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Inside ",(0,i.jsx)(n.a,{href:"/liquid/language/tags#liquid",children:(0,i.jsx)(n.code,{children:"{% liquid %}"})})," tags any line starting with a hash is considered a comment."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{% liquid\n  # greetings\n  echo 'Hello, World!'\n  # Multi line\n  # comment\n%}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.useMDXComponents)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.r(n),t.d(n,{MDXProvider:()=>a,useMDXComponents:()=>r});var i=t(7294);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
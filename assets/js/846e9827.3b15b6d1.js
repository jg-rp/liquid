"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5150],{5264:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/whitespace-suppression","title":"Whitespace Suppression","description":"Block tags that, when rendered, contain only whitespace are suppressed by default.","source":"@site/docs/guides/whitespace-suppression.md","sourceDirName":"guides","slug":"/guides/whitespace-suppression","permalink":"/liquid/guides/whitespace-suppression","draft":false,"unlisted":false,"editUrl":"https://github.com/jg-rp/liquid/tree/docs/docs/guides/whitespace-suppression.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Undefined Variables","permalink":"/liquid/guides/undefined-variables"},"next":{"title":"Resource Limits","permalink":"/liquid/guides/resource-limits"}}');var t=s(4848),r=s(8453);const o={},l="Whitespace Suppression",a={},c=[{value:"Disabling Whitespace Suppression",id:"disabling-whitespace-suppression",level:2},{value:"Selective Whitespace Suppression",id:"selective-whitespace-suppression",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.useMDXComponents)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"whitespace-suppression",children:"Whitespace Suppression"})}),"\n",(0,t.jsx)(n.p,{children:"Block tags that, when rendered, contain only whitespace are suppressed by default."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Template\n\ntemplate = Template("Hello{% if true %}\\n\\n{% endif %}World!")\nprint(template.render())\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"HelloWorld!\n"})}),"\n",(0,t.jsxs)(n.p,{children:["That is unless the block contains an output statement (",(0,t.jsx)(n.code,{children:"{{ .. }}"}),") or ",(0,t.jsx)(n.code,{children:"{% echo %}"})," tag, even if the result of that output is whitespace only."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from liquid import Template\n\ntemplate = Template(\"Hello{% if true %}{{ '\\n\\n' }}{% endif %}World!\")\nprint(template.render())\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"Hello\n\nWorld!\n"})}),"\n",(0,t.jsx)(n.h2,{id:"disabling-whitespace-suppression",children:"Disabling Whitespace Suppression"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.10.0"})})}),"\n",(0,t.jsxs)(n.p,{children:["Automatic suppression of whitespace only blocks can be disabled by subclassing ",(0,t.jsx)(n.a,{href:"/liquid/api/Environment",children:(0,t.jsx)(n.code,{children:"liquid.Environment"})})," and setting the class attribute ",(0,t.jsx)(n.code,{children:"render_whitespace_only_blocks"})," to ",(0,t.jsx)(n.code,{children:"True"}),". Templates rendered from such an environment will output blocks that contain whitespace only."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    render_whitespace_only_blocks = True\n\nenv = MyEnvironment()\ntemplate = env.from_string("Hello{% if true %}\\n\\n{% endif %}World!")\nprint(template.render())\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"Hello\n\nWorld!\n"})}),"\n",(0,t.jsx)(n.h2,{id:"selective-whitespace-suppression",children:"Selective Whitespace Suppression"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.10.0"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"render_whitespace_only_blocks"})," affects all block tags. You can disable automatic whitespace suppression for one or more tags by registering custom versions of those tags with the ",(0,t.jsx)(n.code,{children:"force_output"})," class attribute set to ",(0,t.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This example disables whitespace suppression for ",(0,t.jsx)(n.code,{children:"{% unless %}"})," tags, but keeps it active for ",(0,t.jsx)(n.code,{children:"{% for %}"}),", ",(0,t.jsx)(n.code,{children:"{% if %}"})," and ",(0,t.jsx)(n.code,{children:"{% case %}"})," tags."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid.builtin.tags.unless_tag import UnlessNode\nfrom liquid.builtin.tags.unless_tag import UnlessTag\n\nclass MyUnlessNode(UnlessNode):\n    force_output = True\n\n\nclass MyUnlessTag(UnlessTag):\n    node_class = MyUnlessNode\n\n\nenv = Environment()\nenv.add_tag(MyUnlessTag)\n\ntemplate = env.from_string(\n    "{% for x in (1..3) %}"\n    "{{ x }}"\n    "{% unless forloop.last %}\\n{% endunless %}"\n    "{% endfor %}"\n)\n\nresult = template.render() # "1\\n2\\n3"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.useMDXComponents)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.r(n),s.d(n,{MDXProvider:()=>l,useMDXComponents:()=>o});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
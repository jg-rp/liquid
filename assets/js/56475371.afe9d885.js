"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[9257],{628:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=t(4848),r=t(8453);const i={},o="Objects and Drops",l={id:"introduction/objects-and-drops",title:"Objects and Drops",description:"Python Liquid uses getitem internally for resolving property names and accessing items in a sequence. So, if your data is some combination of dictionaries and lists, for example, templates can reference objects as follows.",source:"@site/docs/introduction/objects-and-drops.md",sourceDirName:"introduction",slug:"/introduction/objects-and-drops",permalink:"/liquid/introduction/objects-and-drops",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/objects-and-drops.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Render Context",permalink:"/liquid/introduction/render-context"},next:{title:"Strictness",permalink:"/liquid/introduction/strictness"}},a={},d=[{value:"Drop Wrapper",id:"drop-wrapper",level:2},{value:"<code>__liquid__</code>",id:"__liquid__",level:2},{value:"<code>__html__</code>",id:"__html__",level:2},{value:"<code>__str__</code> and <code>__int__</code>",id:"__str__-and-__int__",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.useMDXComponents)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"objects-and-drops",children:"Objects and Drops"}),"\n",(0,s.jsxs)(n.p,{children:["Python Liquid uses ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/reference/datamodel.html#object.__getitem__",children:(0,s.jsx)(n.code,{children:"__getitem__"})})," internally for resolving property names and accessing items in a sequence. So, if your ",(0,s.jsx)(n.a,{href:"/liquid/introduction/render-context#render-arguments",children:"data"})," is some combination of dictionaries and lists, for example, templates can reference objects as follows."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="data"',children:'{\n  "products": [\n    {\n      "title": "Some Shoes",\n      "available": 5,\n      "colors": ["blue", "red"]\n    },\n    {\n      "title": "A Hat",\n      "available": 2,\n      "colors": ["grey", "brown"]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{{ products[0].title }}\n{{ products[-2]['available'] }}\n{{ products.last.title }}\n{{ products.first.colors | join: ', ' }}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"Some Shoes\n5\nA Hat\nblue, red\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Attempting to access properties from a Python class or class instance ",(0,s.jsx)(n.strong,{children:"will not work"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from liquid import Template\n\nclass Product:\n    def __init__(self, title, colors):\n        self.title = title\n        self.colors = colors\n\nproducts = [\n    Product(title="Some Shoes", colors=["blue", "red"]),\n    Product(title="A Hat", colors=["grey", "brown"]),\n]\n\nTemplate("{{ products.first.title }}!").render(products=products)\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"!\n"})}),"\n",(0,s.jsxs)(n.p,{children:['This is by design, and is one of the reasons Liquid is considered "safe" and "suitable for end users". To expose an object\'s properties we can implement Python\'s ',(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence",children:"Sequence"})," or ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping",children:"Mapping"})," interface."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:['Python Liquid\'s equivalent of a "drop", as found in Ruby Liquid, is a Python object that implements the ',(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence",children:"Sequence"})," or ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping",children:"Mapping"})," interface."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from collections import abc\nfrom liquid import Template, StrictUndefined\n\nclass User(abc.Mapping):\n    def __init__(\n        self,\n        first_name,\n        last_name,\n        perms,\n    ):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.perms = perms or []\n\n        self._keys = [\n            "first_name",\n            "last_name",\n            "is_admin",\n            "name",\n        ]\n\n    def __getitem__(self, k):\n        if k in self._keys:\n            return getattr(self, k)\n        raise KeyError(k)\n\n    def __iter__(self):\n        return iter(self._keys)\n\n    def __len__(self):\n        return len(self._keys)\n\n    def __str__(self):\n        return f"User(first_name=\'{self.first_name}\', last_name=\'{self.last_name}\')"\n\n    @property\n    def is_admin(self):\n        return "admin" in self.perms\n\n    @property\n    def name(self):\n        return f"{self.first_name} {self.last_name}"\n\n\nuser = User("John", "Smith", ["admin"])\n\nprint(Template("{{ user.first_name }}").render(user=user))  # John\nprint(Template("{{ user.name }}").render(user=user))  # John Smith\nprint(Template("{{ user.is_admin }}").render(user=user))  # true\n\nprint(Template("{{ user.perms[0] }}", undefined=StrictUndefined).render(user=user))\n# UndefinedError: key error: \'perms\', user[perms][0], on line 1\n'})}),"\n",(0,s.jsx)(n.h2,{id:"drop-wrapper",children:"Drop Wrapper"}),"\n",(0,s.jsx)(n.p,{children:'One could implement a simple "Drop" wrapper for data access objects like this, while still being explicit about which properties are exposed to templates.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Drop(abc.Mapping):\n    def __init__(obj, keys):\n        self.obj = obj\n        self.keys = keys\n\n    def __getitem__(self, k):\n        # Delegate attribute access to self.obj only if `k` is in `self.keys`.\n        if k in self.keys:\n            return getattr(obj, k)\n        raise KeyError(k)\n\n    def __iter__(self):\n        return iter(self.keys)\n\n    def __len__(self):\n        return len(self.keys)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"__liquid__",children:(0,s.jsx)(n.code,{children:"__liquid__"})}),"\n",(0,s.jsxs)(n.p,{children:["By implementing a ",(0,s.jsx)(n.code,{children:"__liquid__"})," method, Python objects can behave like primitive Liquid data types. This is useful for situations where you need your Python object to act as an array index, or to be compared to a primitive data type, for example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from liquid import Template\n\nclass IntDrop:\n    def __init__(self, val: int):\n        self.val = val\n\n    def __int__(self) -> int:\n        return self.val\n\n    def __str__(self) -> str:\n        return "one"\n\n    def __liquid__(self) -> int:\n        return self.val\n\n\ntemplate = Template(\n    "{% if my_drop < 10 %}"\n    "{{ my_drop }} "\n    "{% endif %}"\n    "{{ some_array[my_drop] }}"\n)\n\ncontext_data = {\n    "my_drop": IntDrop(1),\n    "some_array": ["a", "b", "c"],\n}\n\nprint(template.render(**context_data))  # one b\n'})}),"\n",(0,s.jsx)(n.h2,{id:"__html__",children:(0,s.jsx)(n.code,{children:"__html__"})}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.a,{href:"/liquid/introduction/auto-escape",children:"HTML auto-escaping"})," is enabled, an object can be output as an HTML-safe string by implementing an ",(0,s.jsx)(n.code,{children:"__html__()"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nclass ListDrop:\n    def __init__(self, somelist):\n        self.items = somelist\n\n    def __str__(self):\n        return f"ListDrop({self.items})"\n\n    def __html__(self):\n        lis = "\\n".join(f"  <li>{item}</li>" for item in self.items)\n        return f"<ul>\\n{lis}\\n</ul>"\n\nenv = Environment(autoescape=True)\ntemplate = env.from_string(r"{{ products }}")\nprint(template.render(products=ListDrop(["Shoe", "Hat", "Ball"])))\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",metastring:'title="output"',children:"<ul>\n  <li>Shoe</li>\n  <li>Hat</li>\n  <li>Ball</li>\n</ul>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If auto-escaping is not enabled, ",(0,s.jsx)(n.code,{children:"__html__"})," is ignored and the return value of ",(0,s.jsx)(n.code,{children:"__str__"})," is used instead. Explicitly escaping an object using the ",(0,s.jsx)(n.a,{href:"../language/filters#escape",children:"escape"})," filter will always yield an escaped version of ",(0,s.jsx)(n.code,{children:"__str__"}),"."]}),"\n",(0,s.jsxs)(n.h2,{id:"__str__-and-__int__",children:[(0,s.jsx)(n.code,{children:"__str__"})," and ",(0,s.jsx)(n.code,{children:"__int__"})]}),"\n",(0,s.jsxs)(n.p,{children:["Other Python ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/reference/datamodel.html",children:"magic methods"})," will work with Liquid filters and special properties too."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nenv = Environment()\n\nclass Foo:\n    def __int__(self):\n        return 7\n\n    def __str__(self):\n        return "Bar"\n\n    def __len__(self):\n        return 5\n\n\ntemplate = env.from_string(\n    """\\\n{{ foo }}\n{{ foo | plus: 2 }}\n{{ foo.size }}\n"""\n)\n\nprint(template.render(foo=Foo()))\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plain",metastring:"title=output",children:"Bar\n9\n5\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.useMDXComponents)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.r(n),t.d(n,{MDXProvider:()=>l,useMDXComponents:()=>o});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
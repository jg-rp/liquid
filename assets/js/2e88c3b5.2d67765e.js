"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5219],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>s,withMDXComponents:()=>c});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),c=function(e){return function(n){var t=s(n.components);return r.createElement(e,a({},n,{components:t}))}},s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),p=i,u=c["".concat(o,".").concat(p)]||c[p]||f[p]||a;return t?r.createElement(u,m(m({ref:n},d),{},{components:t})):r.createElement(u,m({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var m={};for(var l in n)hasOwnProperty.call(n,l)&&(m[l]=n[l]);m.originalType=e,m[u]="string"==typeof e?e:i,o[1]=m;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>m,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={},o="Comments",m={unversionedId:"introduction/comments",id:"introduction/comments",title:"Comments",description:"Using the standard {% comment %} tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between {% comment %} and {% endcomment %}.",source:"@site/docs/introduction/comments.md",sourceDirName:"introduction",slug:"/introduction/comments",permalink:"/liquid/introduction/comments",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/comments.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Strictness",permalink:"/liquid/introduction/strictness"},next:{title:"HTML Auto-Escape",permalink:"/liquid/introduction/auto-escape"}},l={},d=[{value:"Alternative Comment Syntax",id:"alternative-comment-syntax",level:2}],c={toc:d},s="wrapper";function p(e){let{components:n,...t}=e;return(0,i.mdx)(s,(0,r.default)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"comments"},"Comments"),(0,i.mdx)("p",null,"Using the standard ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/language/tags#comment"},(0,i.mdx)("inlineCode",{parentName:"a"},"{% comment %}"))," tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% comment %}")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% endcomment %}"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% comment %} Determine if the current product is on sale. {% endcomment %}\n{% liquid\n  if product.was_price\n    assign on_sale = true\n  else\n    comment was_price is undefined\n    endcomment\n    assign on_sale = false\n  endif\n%}\n")),(0,i.mdx)("admonition",{type:"caution"},(0,i.mdx)("p",{parentName:"admonition"},"Python Liquid will raise a ",(0,i.mdx)("inlineCode",{parentName:"p"},"LiquidSyntaxError")," if it finds the string ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% endcomment %}")," inside a comment block. Ruby Liquid, on the other hand, will successfully parse fully-formed nested comment blocks, but will fail to parse a comment block containing either a ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% comment %}")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"{% endcomment %}")," on its own.")),(0,i.mdx)("p",null,"Similarly, with the ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/language/tags#inline-comment"},"inline comment tag")," added in Python Liquid version 1.2.0, one or more lines can be commented out in a single inline tag."),(0,i.mdx)("p",null,"Both the traditional comment block and the newer inline comment tag suffer from problems when commenting out other liquid tags."),(0,i.mdx)("h2",{id:"alternative-comment-syntax"},"Alternative Comment Syntax"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("em",{parentName:"strong"},"New in version 1.1.0"))),(0,i.mdx)("p",null,"Python Liquid offers an alternative, non-standard template comment syntax. When enabled, anything between ",(0,i.mdx)("inlineCode",{parentName:"p"},"{#")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"#}")," will be treated as a comment. It is disabled by default. Enable it using the ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#template_comments"},(0,i.mdx)("inlineCode",{parentName:"a"},"template_comments"))," argument to ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,i.mdx)("inlineCode",{parentName:"a"},"liquid.Environment"))," or ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/api/Template"},(0,i.mdx)("inlineCode",{parentName:"a"},"liquid.Template")),"."),(0,i.mdx)("admonition",{type:"caution"},(0,i.mdx)("p",{parentName:"admonition"},"This alternative comment syntax is non-standard. If you choose to use it in your templates, those\ntemplates are unlikely to render correctly with other implementations of Liquid.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nenv = Environment(template_comments=True)\n")),(0,i.mdx)("p",null,"Because this comment syntax is not implemented as a tag, there are no issues commenting out\narbitrary chunks of Liquid."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{# note: comment this out for now\n  {% for x in (1..5) %}\n    {{ x }}\n  {% endfor %}\n#}\n")),(0,i.mdx)("p",null,"Inside ",(0,i.mdx)("a",{parentName:"p",href:"/liquid/language/tags#liquid"},(0,i.mdx)("inlineCode",{parentName:"a"},"{% liquid %}"))," tags any line starting with a hash is considered a comment."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% liquid\n  # greetings\n  echo 'Hello, World!'\n  # Multi line\n  # comment\n%}\n")))}p.isMDXComponent=!0}}]);
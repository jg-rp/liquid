"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[5187],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>f});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},m=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(a),c=i,f=u["".concat(p,".").concat(c)]||u[c]||d[c]||l;return a?t.createElement(f,r(r({ref:n},m),{},{components:a})):t.createElement(f,r({ref:n},m))}));function f(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3365:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=a(7462),i=(a(7294),a(3905));const l={},r="Static Template Analysis",o={unversionedId:"guides/static-template-analysis",id:"guides/static-template-analysis",title:"Static Template Analysis",description:"_New in version 1.2.0_",source:"@site/docs/guides/static-template-analysis.md",sourceDirName:"guides",slug:"/guides/static-template-analysis",permalink:"/liquid/guides/static-template-analysis",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/static-template-analysis.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Security",permalink:"/liquid/guides/security"},next:{title:"Contextual Template Analysis",permalink:"/liquid/guides/contextual-template-analysis"}},p={},s=[{value:"Variables",id:"variables",level:2},{value:"Global Variables",id:"global-variables",level:3},{value:"Local Variables",id:"local-variables",level:3},{value:"Filters",id:"filters",level:2},{value:"Tags",id:"tags",level:2},{value:"Analyzing Partial Templates",id:"analyzing-partial-templates",level:2},{value:"Analyzing Custom Tags",id:"analyzing-custom-tags",level:2}],m={toc:s},u="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(u,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"static-template-analysis"},"Static Template Analysis"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.2.0"))),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/BoundTemplate#analyze"},(0,i.kt)("inlineCode",{parentName:"a"},"analyze()"))," or ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/BoundTemplate#analyze_async"},(0,i.kt)("inlineCode",{parentName:"a"},"analyze_async()"))," methods of a Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/BoundTemplate"},(0,i.kt)("inlineCode",{parentName:"a"},"Template"))," to traverse its abstract syntax tree and report template tag, filter and variable usage."),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("p",null,"The object returned from ",(0,i.kt)("inlineCode",{parentName:"p"},"analyze()")," is an instance of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis")),". Its ",(0,i.kt)("inlineCode",{parentName:"p"},"variables")," property is a dictionary mapping template variable names to a list of two-tuples. Each tuple is the template name and line number where the variable was found."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template("""\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n{% for name in people %}\n    {{ forloop.index }} - {{ greeting }}, {{ name }}!\n{% endfor %}\n""")\n\nanalysis = template.analyze()\nprint(list(analysis.variables))\n\nfor name, location in analysis.variables.items():\n    for template_name, line_number in location:\n        print(f"\'{name}\' found in \'{template_name}\' on line {line_number}")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"['people', 'forloop.index', 'greeting', 'name']\n'people' found in '<string>' on line 2\n'people' found in '<string>' on line 3\n'forloop.index' found in '<string>' on line 4\n'greeting' found in '<string>' on line 4\n'name' found in '<string>' on line 4\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.6.0"))),(0,i.kt)("p",null,"Variable names - the keys of ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.variables"),", and others - are a ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," subclass that includes a ",(0,i.kt)("inlineCode",{parentName:"p"},"parts")," property, being a tuple representation of a variable's parts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Template\n\ntemplate = Template(\"{{ data.some[thing['foo.bar']] }}\")\n\nfor var, location in template.analyze().variables.items():\n    for template_name, line_number in location:\n        print(f\"{var.parts} found in '{template_name}' on line {line_number}\")\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"('data', 'some', ('thing', 'foo.bar')) found in '<string>' on line 1\n('thing', 'foo.bar') found in '<string>' on line 1\n")),(0,i.kt)("h3",{id:"global-variables"},"Global Variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"global_variables")," property of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"variables"),", but only includes those variables that are not in scope from previous ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"capture")," tags, or added to a block's scope by a block tag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template("""\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n{% for name in people %}\n    {{ forloop.index }} - {{ greeting }}, {{ name }}!\n{% endfor %}\n""")\n\nanalysis = template.analyze()\nprint("all variables: ", list(analysis.variables))\nprint("global variables: ", list(analysis.global_variables))\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"all variables:  ['people', 'forloop.index', 'greeting', 'name']\nglobal variables:  ['greeting']\n")),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"greeting")," is assumed to be global (that is, provided by application developers rather than a template author), Python Liquid knows that ",(0,i.kt)("inlineCode",{parentName:"p"},"forloop")," is in scope for the duration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," block. If ",(0,i.kt)("inlineCode",{parentName:"p"},"people")," were referenced before being assigned, we'd see an entry in the ",(0,i.kt)("inlineCode",{parentName:"p"},"people")," list for each location where it is out of scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template("""\\\n{{ people }}\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n""")\n\nanalysis = template.analyze()\n\nfor name, location in analysis.global_variables.items():\n    for template_name, line_number in location:\n        print(f"\'{name}\' is out of scope in \'{template_name}\' on line {line_number}")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"'people' is out of scope in '<string>' on line 1\n")),(0,i.kt)("h3",{id:"local-variables"},"Local Variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"local_variables")," property of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," is, again, a dictionary mapping template variable names to their locations. Each entry is the location of an ",(0,i.kt)("inlineCode",{parentName:"p"},"assign"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"increment"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"decrement")," tag (or any custom tag that introduces names into the template local namespace) that initializes or updates the variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template("""\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{% assign people = "Bob, Frank" | split: ", " %}\n""")\n\nanalysis = template.analyze()\n\nfor name, location in analysis.local_variables.items():\n    for template_name, line_number in location:\n        print(f"\'{name}\' assigned in \'{template_name}\' on line {line_number}")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"'people' assigned in '<string>' on line 1\n'people' assigned in '<string>' on line 2\n")),(0,i.kt)("h2",{id:"filters"},"Filters"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.7.0"))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," property of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," is a dictionary mapping Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquid/language/introduction#filters"},"filter")," names to their locations. Undefined filters will be included in ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.filters"),", regardless of whether ",(0,i.kt)("a",{parentName:"p",href:"/liquid/introduction/strictness#undefined-filters"},(0,i.kt)("inlineCode",{parentName:"a"},"strict_filters"))," is set or not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template(\n    """\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{% for person in people %}\n  - {{ person | upcase | prepend: \'Hello, \' }}\n{% endfor %}\n"""\n)\n\nanalysis = template.analyze()\n\nfor filter_name, location in analysis.filters.items():\n    for template_name, line_number in location:\n        print(f"\'{filter_name}\' found in \'{template_name}\' on line {line_number}")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"'split' found in '<string>' on line 1\n'upcase' found in '<string>' on line 3\n'prepend' found in '<string>' on line 3\n")),(0,i.kt)("h2",{id:"tags"},"Tags"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.7.0"))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," property of ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," is a dictionary mapping Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquid/language/introduction#tags"},"tag")," names to their locations. Note that ",(0,i.kt)("a",{parentName:"p",href:"/liquid/language/tags#raw"},(0,i.kt)("inlineCode",{parentName:"a"},"{% raw %} tags"))," will never be included in ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.tags"),". This is because the lexer converts them to template text before we get a chance to analyze them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Template\n\ntemplate = Template(\n    """\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{% for person in people %}\n  - {{ person | upcase | prepend: \'Hello, \' }}\n{% endfor %}\n"""\n)\n\nanalysis = template.analyze()\n\nfor tag_name, location in analysis.tags.items():\n    for template_name, line_number in location:\n        print(f"\'{tag_name}\' found in \'{template_name}\' on line {line_number}")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:"title=output",title:"output"},"'assign' found in '<string>' on line 1\n'for' found in '<string>' on line 2\n")),(0,i.kt)("h2",{id:"analyzing-partial-templates"},"Analyzing Partial Templates"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"follow_partials")," argument to ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/BoundTemplate#analyze"},(0,i.kt)("inlineCode",{parentName:"a"},"BoundTemplate.analyze()"))," is ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," (the default), Python Liquid will attempt to load and analyze templates from ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," tags. In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"include"),", this is only possible when the template name is a string literal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom liquid import Environment, DictLoader\n\ntemplates = {\n    "layout": """\\\n        {% include \'nav\', title: page_name %}\n        {% render \'foot\' with website as site_name %}\n    """,\n    "nav": "{{ title }} nav bar",\n    "foot": "a footer for {{ site_name }}",\n}\n\nenv = Environment(loader=DictLoader(templates))\nlayout = env.get_template("layout")\n\nanalysis = layout.analyze(follow_partials=True)\npprint(analysis.variables)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"{'page_name': [('layout', 1)],\n 'site_name': [('foot', 1)],\n 'title': [('nav', 1)],\n 'website': [('layout', 2)]}\n")),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"raise_for_failures")," argument is ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," (the default), we should expect a ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/exceptions#templatetraversalerror"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateTraversalError"))," to be raised if a partial template can not be loaded. If ",(0,i.kt)("inlineCode",{parentName:"p"},"raise_for_failures")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),", a dictionary of unloadable ",(0,i.kt)("inlineCode",{parentName:"p"},"include"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"render")," tags is available as ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.unloadable_partials"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, DictLoader\n\ntemplates = {\n    "layout": """\\\n        {% include \'nav\', title: page_name %}\n        {% render \'foot\' with website as site_name %}\n    """,\n}\n\nenv = Environment(loader=DictLoader(templates))\nlayout = env.get_template("layout")\n\nanalysis = layout.analyze(follow_partials=True, raise_for_failures=False)\nprint(analysis.unloadable_partials)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:"title=output",title:"output"},"{'foot': [('layout', 2)], 'nav': [('layout', 1)]}\n")),(0,i.kt)("h2",{id:"analyzing-custom-tags"},"Analyzing Custom Tags"),(0,i.kt)("p",null,"All built-in tags (the tag's ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression")," classes) implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"children()")," method. When analyzing a custom tag that does not implement ",(0,i.kt)("inlineCode",{parentName:"p"},"children()"),", and with the ",(0,i.kt)("inlineCode",{parentName:"p"},"raise_for_failures")," argument set to ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," (the default), Python Liquid will raise a ",(0,i.kt)("a",{parentName:"p",href:"/liquid/api/exceptions#templatetraversalerror"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateTraversalError")),". When ",(0,i.kt)("inlineCode",{parentName:"p"},"raise_for_failures")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),", a dictionary of unvisitable AST nodes and expressions is available as ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.failed_visits"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, DictLoader\nfrom liquid.ast import Node\nfrom liquid.tag import Tag\n\nclass ExampleNode(Node):\n    def __init__(self, token: Token) -> None:\n        self.tok = token\n\n    def render_to_output(self, context: Context, buffer: TextIO) -> Optional[bool]:\n        buffer.write("example node")\n\n    async def render_to_output_async(\n        self, context: Context, buffer: TextIO\n    ) -> Optional[bool]:\n        buffer.write("example node")\n\n\nclass ExampleTag(Tag):\n    block = False\n    name = "example"\n\n    def parse(self, stream: TokenStream) -> Node:\n        return ExampleNode(stream.current)\n\n\ntemplates = {\n    "layout": "{% example %}"\n}\n\nenv = Environment(loader=DictLoader(templates))\nenv.add_tag(ExampleTag)\nlayout = env.get_template("layout")\n\nanalysis = layout.analyze(follow_partials=True, raise_for_failures=False)\nprint(analysis.failed_visits)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:"title=output",title:"output"},"{'ExampleNode': [('layout', 1)]}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"liquid.ast.Node.children()")," should return a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.ast.ChildNode")," objects. Each ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildNode")," includes a child ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),", plus any names the tag adds to the template local scope or subsequent block scope. Please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid/tree/main/liquid/builtin/tags"},"liquid/builtin/tags")," for examples."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"liquid.expression.Expression.children()")," is expected to return a list of child ",(0,i.kt)("inlineCode",{parentName:"p"},"Expressions"),". For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.expression.RangeLiteral")," returns a list containing expressions for its ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stop")," properties. Please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid/blob/main/liquid/expression.py"},"liquid/expression.py")," for examples."))}d.isMDXComponent=!0}}]);
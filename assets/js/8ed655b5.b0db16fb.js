"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[4295],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>m,MDXProvider:()=>x,mdx:()=>h,useMDXComponents:()=>s,withMDXComponents:()=>o});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},i.apply(this,arguments)}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function d(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),o=function(e){return function(n){var a=s(n.components);return t.createElement(e,i({},n,{components:a}))}},s=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):d(d({},n),e)),a},x=function(e){var n=s(e.components);return t.createElement(m.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},N=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),o=s(a),x=r,u=o["".concat(l,".").concat(x)]||o[x]||c[x]||i;return a?t.createElement(u,d(d({ref:n},m),{},{components:a})):t.createElement(u,d({ref:n},m))}));function h(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=N;var d={};for(var p in n)hasOwnProperty.call(n,p)&&(d[p]=n[p]);d.originalType=e,d[u]="string"==typeof e?e:r,l[1]=d;for(var m=2;m<i;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}N.displayName="MDXCreateElement"},1841:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>x,frontMatter:()=>i,metadata:()=>d,toc:()=>m});var t=a(7462),r=(a(7294),a(3905));const i={id:"BoundTemplate"},l="liquid.BoundTemplate",d={unversionedId:"api/BoundTemplate",id:"api/BoundTemplate",title:"liquid.BoundTemplate",description:"A liquid template that has been parsed and is bound to a liquid.Environment.",source:"@site/docs/api/bound-template.md",sourceDirName:"api",slug:"/api/BoundTemplate",permalink:"/liquid/api/BoundTemplate",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/api/bound-template.md",tags:[],version:"current",frontMatter:{id:"BoundTemplate"},sidebar:"apiSidebar",previous:{title:"liquid.Environment",permalink:"/liquid/api/Environment"},next:{title:"liquid.CachingFileSystemLoader",permalink:"/liquid/api/cachingfilesystemloader"}},p={},m=[{value:"<code>BoundTemplate</code>",id:"boundtemplate",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>globals</code>",id:"globals",level:3},{value:"<code>matter</code>",id:"matter",level:3},{value:"<code>is_up_to_date</code>",id:"is_up_to_date",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>analyze</code>",id:"analyze",level:3},{value:"<code>analyze_async</code>",id:"analyze_async",level:3},{value:"<code>analyze_with_context</code>",id:"analyze_with_context",level:3},{value:"<code>analyze_with_context_async</code>",id:"analyze_with_context_async",level:3},{value:"<code>render</code>",id:"render",level:3},{value:"<code>render_async</code>",id:"render_async",level:3},{value:"<code>render_with_context</code>",id:"render_with_context",level:3},{value:"<code>render_with_context_async</code>",id:"render_with_context_async",level:3},{value:"<code>is_up_to_date_async</code>",id:"is_up_to_date_async",level:3}],o={toc:m},s="wrapper";function x(e){let{components:n,...a}=e;return(0,r.mdx)(s,(0,t.default)({},o,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"liquidboundtemplate"},"liquid.BoundTemplate"),(0,r.mdx)("p",null,"A liquid template that has been parsed and is bound to a ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.Environment")),"."),(0,r.mdx)("p",null,"You probably don't want to instantiate ",(0,r.mdx)("inlineCode",{parentName:"p"},"BoundTemplate")," directly. Use ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#from_string"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.Environment.from_string()"))," or ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/Environment#get_template"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.Environment.get_template()"))," instead."),(0,r.mdx)("h2",{id:"boundtemplate"},(0,r.mdx)("inlineCode",{parentName:"h2"},"BoundTemplate")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"class BoundTemplate(env, parse_tree, [options])")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Parameters"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"env: liquid.Environment")," - The environment this template is bound to.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"parse_tree: liquid.ast.ParseTree")," - The parse tree representing this template.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"name: str")," - Optional name of the template. Defaults to an empty string.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"path: Optional[Union[str, Path]]")," - Optional origin path or identifier for the template.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"globals: Optional[Dict[str, object]]")," - An optional mapping of context variables made available every time the resulting template is rendered. Defaults to ",(0,r.mdx)("inlineCode",{parentName:"p"},"None"),".")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"matter: Optional[Mapping[str, object]]"),' - Optional mapping containing variables associated with the template. Could be "front matter" or other meta data.')),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"uptodate: Optional[Callable[[], bool]]")," - Optional callable that will return ",(0,r.mdx)("inlineCode",{parentName:"p"},"True")," if the template is up to date, or ",(0,r.mdx)("inlineCode",{parentName:"p"},"False")," if it needs to be reloaded. Defaults to ",(0,r.mdx)("inlineCode",{parentName:"p"},"None"),"."))),(0,r.mdx)("h2",{id:"properties"},"Properties"),(0,r.mdx)("h3",{id:"name"},(0,r.mdx)("inlineCode",{parentName:"h3"},"name")),(0,r.mdx)("p",null,"The template's name. As it would been passed to ",(0,r.mdx)("a",{parentName:"p",href:"Environment#get_template"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.Environment.get_template()")),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"str")),(0,r.mdx)("h3",{id:"globals"},(0,r.mdx)("inlineCode",{parentName:"h3"},"globals")),(0,r.mdx)("p",null,"A dictionary of context variables made available every time this template is rendered."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"Dict[str, object]")),(0,r.mdx)("h3",{id:"matter"},(0,r.mdx)("inlineCode",{parentName:"h3"},"matter")),(0,r.mdx)("p",null,"Similar to ",(0,r.mdx)("inlineCode",{parentName:"p"},"globals"),", a dictionary of context variables made available every time this template is rendered. ",(0,r.mdx)("inlineCode",{parentName:"p"},"globals")," is usually passed down from the environment, ",(0,r.mdx)("inlineCode",{parentName:"p"},"matter")," usually originates from a template loader. They are kept separate so subclasses can choose how to merge them."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"Mapping[str, object]")),(0,r.mdx)("h3",{id:"is_up_to_date"},(0,r.mdx)("inlineCode",{parentName:"h3"},"is_up_to_date")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"True")," if the template is up to date, ",(0,r.mdx)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"bool")),(0,r.mdx)("h2",{id:"methods"},"Methods"),(0,r.mdx)("h3",{id:"analyze"},(0,r.mdx)("inlineCode",{parentName:"h3"},"analyze")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"analyze(follow_partials, raise_for_failures)")),(0,r.mdx)("p",null,"Statically analyze the template and any included/rendered templates."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Parameters:")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"follow_partials: bool")," - If ",(0,r.mdx)("inlineCode",{parentName:"p"},"True"),", we will try to load partial templates and analyze those templates too. Default's to ",(0,r.mdx)("inlineCode",{parentName:"p"},"True"),".")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"raise_for_failures: bool")," - If ",(0,r.mdx)("inlineCode",{parentName:"p"},"True"),", will raise an exception if an ",(0,r.mdx)("inlineCode",{parentName:"p"},"ast.Node")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"expression.Expression")," does not define a ",(0,r.mdx)("inlineCode",{parentName:"p"},"children()")," method, or if a partial template can not be loaded. When ",(0,r.mdx)("inlineCode",{parentName:"p"},"False"),", no exception is raised and a mapping of failed nodes and expressions is available as the ",(0,r.mdx)("inlineCode",{parentName:"p"},"failed_visits")," property. A mapping of unloadable partial templates is stored in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"unloadable_partials")," property."))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns"),": An object containing analysis results.",(0,r.mdx)("br",{parentName:"p"}),"\n",(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.template.TemplateAnalysis"))),(0,r.mdx)("h3",{id:"analyze_async"},(0,r.mdx)("inlineCode",{parentName:"h3"},"analyze_async")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"async analyze_async(follow_partials, raise_for_failures)")),(0,r.mdx)("p",null,"Statically analyze the template and any included/rendered templates."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Parameters:")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"follow_partials: bool")," - If ",(0,r.mdx)("inlineCode",{parentName:"p"},"True"),", we will try to load partial templates and analyze those templates too. Default's to ",(0,r.mdx)("inlineCode",{parentName:"p"},"True"),".")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"raise_for_failures: bool")," - If ",(0,r.mdx)("inlineCode",{parentName:"p"},"True"),", will raise an exception if an ",(0,r.mdx)("inlineCode",{parentName:"p"},"ast.Node")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"expression.Expression")," does not define a ",(0,r.mdx)("inlineCode",{parentName:"p"},"children()")," method, or if a partial template can not be loaded. When ",(0,r.mdx)("inlineCode",{parentName:"p"},"False"),", no exception is raised and a mapping of failed nodes and expressions is available as the ",(0,r.mdx)("inlineCode",{parentName:"p"},"failed_visits")," property. A mapping of unloadable partial templates is stored in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"unloadable_partials")," property."))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns"),": An object containing analysis results.",(0,r.mdx)("br",{parentName:"p"}),"\n",(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/template-analysis"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.template.TemplateAnalysis"))),(0,r.mdx)("h3",{id:"analyze_with_context"},(0,r.mdx)("inlineCode",{parentName:"h3"},"analyze_with_context")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"analyze_with_context(*args, **kwargs)")),(0,r.mdx)("p",null,"Analyze a path through this template's syntax tree given some context data. Accepts the same arguments as ",(0,r.mdx)("a",{parentName:"p",href:"#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"render")),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns"),": Contextual analysis results\n",(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/contextual-template-analysis"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.template.ContextualTemplateAnalysis"))),(0,r.mdx)("h3",{id:"analyze_with_context_async"},(0,r.mdx)("inlineCode",{parentName:"h3"},"analyze_with_context_async")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"async analyze_with_context_async(*args, **kwargs)")),(0,r.mdx)("p",null,"Analyze a path through this template's syntax tree given some context data. Accepts the same arguments as ",(0,r.mdx)("a",{parentName:"p",href:"#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"render")),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns"),": Contextual analysis results\n",(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/contextual-template-analysis"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.template.ContextualTemplateAnalysis"))),(0,r.mdx)("h3",{id:"render"},(0,r.mdx)("inlineCode",{parentName:"h3"},"render")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"render(*args, **kwargs) -> str")),(0,r.mdx)("p",null,"Render the template with ",(0,r.mdx)("inlineCode",{parentName:"p"},"args")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"kwargs")," included in the render context. Accepts the same arguments as ",(0,r.mdx)("inlineCode",{parentName:"p"},"dict()"),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns"),": The rendered template as a string.",(0,r.mdx)("br",{parentName:"p"}),"\n",(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"str")),(0,r.mdx)("h3",{id:"render_async"},(0,r.mdx)("inlineCode",{parentName:"h3"},"render_async")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"async render_async(*args, **kwargs) -> str")),(0,r.mdx)("p",null,"An async version of ",(0,r.mdx)("a",{parentName:"p",href:"#render"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.BoundTemplate.render()"))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Returns"),": The rendered template as a string.",(0,r.mdx)("br",{parentName:"p"}),"\n",(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"str")),(0,r.mdx)("h3",{id:"render_with_context"},(0,r.mdx)("inlineCode",{parentName:"h3"},"render_with_context")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"render_with_context(context, buffer, *args, **kwargs) -> None")),(0,r.mdx)("p",null,"Render the template using an existing ",(0,r.mdx)("a",{parentName:"p",href:"/liquid/api/context"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.Context"))," and output buffer. ",(0,r.mdx)("inlineCode",{parentName:"p"},"args")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"kwargs")," are passed to ",(0,r.mdx)("inlineCode",{parentName:"p"},"dict()"),". The resulting dictionary is added to the render context."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Parameters"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"context: liquid.Context")," - A render context.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"buffer: TextIO")," - File-like object to which rendered text is written."))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"None")),(0,r.mdx)("h3",{id:"render_with_context_async"},(0,r.mdx)("inlineCode",{parentName:"h3"},"render_with_context_async")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"async render_with_context_async(context, buffer, *args, **kwargs) -> None")),(0,r.mdx)("p",null,"An async version of ",(0,r.mdx)("a",{parentName:"p",href:"#async-render_with_context_async"},(0,r.mdx)("inlineCode",{parentName:"a"},"liquid.BoundTemplate.render_with_context_async()"))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Return Type"),": ",(0,r.mdx)("inlineCode",{parentName:"p"},"None")),(0,r.mdx)("h3",{id:"is_up_to_date_async"},(0,r.mdx)("inlineCode",{parentName:"h3"},"is_up_to_date_async")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"async is_up_to_date_async() -> bool")),(0,r.mdx)("p",null,"Return ",(0,r.mdx)("inlineCode",{parentName:"p"},"True")," if the template is up to date, ",(0,r.mdx)("inlineCode",{parentName:"p"},"False")," otherwise."))}x.isMDXComponent=!0}}]);
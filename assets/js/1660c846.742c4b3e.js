"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[4394],{9734:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=i(5893),o=i(1151);const r={},s="Resource Limits",l={id:"guides/resource-limits",title:"Resource Limits",description:"_New in version 1.4.0_",source:"@site/docs/guides/resource-limits.md",sourceDirName:"guides",slug:"/guides/resource-limits",permalink:"/liquid/guides/resource-limits",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/resource-limits.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Whitespace Suppression",permalink:"/liquid/guides/whitespace-suppression"},next:{title:"Django Liquid",permalink:"/liquid/guides/django-liquid"}},a={},d=[{value:"Context Depth Limit",id:"context-depth-limit",level:2},{value:"Local Namespace Limit",id:"local-namespace-limit",level:2},{value:"Loop Iteration Limit",id:"loop-iteration-limit",level:2},{value:"Output Stream Limit",id:"output-stream-limit",level:2},{value:"String to Integer Limit",id:"string-to-integer-limit",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.useMDXComponents)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"resource-limits",children:"Resource Limits"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.4.0"})})}),"\n",(0,t.jsxs)(n.p,{children:["For deployments where template authors are untrusted, you can set limits on some resources to avoid malicious templates from consuming too much memory or too many CPU cycles. Set one or more resource limits by subclassing a Liquid ",(0,t.jsx)(n.a,{href:"/liquid/api/Environment",children:"Environment"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    context_depth_limit = 30\n    local_namespace_limit = 2000\n    loop_iteration_limit = 1000\n    output_stream_limit = 15000\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% for x in (1..1000000) %}\n{% for y in (1..1000000) %}\n    {{ x }},{{ y }}\n{% endfor %}\n{% endfor %}\n""")\n\ntemplate.render()\n# LoopIterationLimitError: loop iteration limit reached, on line 1\n'})}),"\n",(0,t.jsx)(n.h2,{id:"context-depth-limit",children:"Context Depth Limit"}),"\n",(0,t.jsxs)(n.p,{children:["The maximum number of times a render context can be extended or wrapped before a ",(0,t.jsx)(n.a,{href:"/liquid/api/exceptions#liquidexceptionscontextdeptherror",children:(0,t.jsx)(n.code,{children:"ContextDepthError"})})," is raised."]}),"\n",(0,t.jsxs)(n.p,{children:["This helps us guard against recursive use of the ",(0,t.jsx)(n.code,{children:"include"})," and ",(0,t.jsx)(n.code,{children:"render"})," tags. The default context depth limit is 30. Before Python Liquid version 1.4.0, a context depth limit of 30 was hard coded."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\nfrom liquid import DictLoader\n\nenv = Environment(\n    loader=DictLoader(\n        {\n            "foo": "{% render \'bar\' %}",\n            "bar": "{% render \'foo\' %}",\n        }\n    )\n)\n\ntemplate = env.from_string("{% render \'foo\' %}")\ntemplate.render()\n# ContextDepthError: maximum context depth reached, possible recursive render, on line 1\n'})}),"\n",(0,t.jsx)(n.h2,{id:"local-namespace-limit",children:"Local Namespace Limit"}),"\n",(0,t.jsxs)(n.p,{children:["The maximum number of bytes (according to ",(0,t.jsx)(n.code,{children:"sys.getsizeof()"}),") allowed in a template's local namespace, per render, before a ",(0,t.jsx)(n.a,{href:"/liquid/api/exceptions#liquidexceptionslocalnamespacelimiterror",children:(0,t.jsx)(n.code,{children:"LocalNamespaceLimitError"})})," exception is raised. Note that we only count the size of the local namespace values, not its keys."]}),"\n",(0,t.jsxs)(n.p,{children:["The default ",(0,t.jsx)(n.code,{children:"local_namespace_limit"})," is ",(0,t.jsx)(n.code,{children:"None"}),", meaning there is no limit."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    local_namespace_limit = 50  # Very low, for demonstration purposes.\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% assign x = "Nunc est nulla, pellentesque ac dui id erat curae." %}\n""")\n\ntemplate.render()\n# LocalNamespaceLimitError: local namespace limit reached, on line 1\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://doc.pypy.org/en/latest/cpython_differences.html",children:"PyPy"})," does not implement ",(0,t.jsx)(n.code,{children:"sys.getsizeof"}),". Instead of a size in bytes, when run with PyPy, ",(0,t.jsx)(n.code,{children:"local_namespace_limit"})," will degrade to being the number of distinct values in a template's local namespace."]})}),"\n",(0,t.jsxs)(n.p,{children:["You can customize the namespace size calculation by subclassing ",(0,t.jsx)(n.a,{href:"/liquid/api/context",children:(0,t.jsx)(n.code,{children:"Context"})})," and overriding ",(0,t.jsx)(n.a,{href:"/liquid/api/context#get_size_of_locals",children:(0,t.jsx)(n.code,{children:"get_size_of_locals()"})}),". This example simply counts the number of entries in the namespace."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from liquid import Environment\nfrom liquid import Context\nfrom liquid.template import BoundTemplate\n\nclass MyRenderContext(Context):\n    def get_size_of_locals(self) -> int:\n        if not self.env.local_namespace_limit:\n            return 0\n        return len(self.locals) + self.local_namespace_size_carry\n\n\nclass MyBoundTemplate(BoundTemplate):\n    context_class = MyRenderContext\n\n\nclass MyEnvironment(Environment):\n    local_namespace_limit = 2  # XXX: very low, for demonstration purposes\n    template_class = MyBoundTemplate\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string(\n    \"{% assign foo = 'hello' %}\"\n    \"{% assign bar = 'world' %}\"\n).render()\n\n\n# raises a LocalNamespaceLimitError\ntemplate = env.from_string(\n    \"{% assign foo = 'hello' %}\"\n    \"{% assign bar = 'world' %}\"\n    \"{% assign baz = '!' %}\"\n).render()\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.em,{children:"Changed in version 1.4.7"}),":"]})," The default implementation of ",(0,t.jsx)(n.code,{children:"get_size_of_locals"})," no longer attempts to dedupe local namespace values as it would raise a ",(0,t.jsx)(n.code,{children:"TypeError"})," on unhashable types."]}),"\n",(0,t.jsx)(n.h2,{id:"loop-iteration-limit",children:"Loop Iteration Limit"}),"\n",(0,t.jsxs)(n.p,{children:["The maximum number of loop iterations allowed before a ",(0,t.jsx)(n.a,{href:"/liquid/api/exceptions#liquidexceptionsloopiterationlimiterror",children:(0,t.jsx)(n.code,{children:"LoopIterationLimitError"})})," is raised."]}),"\n",(0,t.jsxs)(n.p,{children:["The default ",(0,t.jsx)(n.code,{children:"loop_iteration_limit"})," is ",(0,t.jsx)(n.code,{children:"None"}),", meaning there is no limit."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    loop_iteration_limit = 999\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% for x in (1..100) %}\n{% for y in (1..100) %}\n    {{ x }},{{ y }}\n{% endfor %}\n{% endfor %}\n""")\n\ntemplate.render()\n# LoopIterationLimitError: loop iteration limit reached, on line 1\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Other built in tags that contribute to the loop iteration counter are ",(0,t.jsx)(n.code,{children:"render"}),", ",(0,t.jsx)(n.code,{children:"include"})," (when using their ",(0,t.jsx)(n.code,{children:"{% render 'thing' for some.thing %}"})," syntax) and ",(0,t.jsx)(n.code,{children:"tablerow"}),". If a partial template is rendered within a ",(0,t.jsx)(n.code,{children:"for"})," loop, the loop counter is carried over to the render context of the partial template."]}),"\n",(0,t.jsx)(n.h2,{id:"output-stream-limit",children:"Output Stream Limit"}),"\n",(0,t.jsxs)(n.p,{children:["The maximum number of bytes that can be written to a template's output stream, per render, before an ",(0,t.jsx)(n.a,{href:"/liquid/api/exceptions#liquidexceptionsoutputstreamlimiterror",children:(0,t.jsx)(n.code,{children:"OutputStreamLimitError"})})," exception is raised."]}),"\n",(0,t.jsxs)(n.p,{children:["The default ",(0,t.jsx)(n.code,{children:"output_stream_limit"})," is ",(0,t.jsx)(n.code,{children:"None"}),", meaning there is no limit."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    output_stream_limit = 20  # Very low, for demonstration purposes.\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% if false %}\nthis is never rendered, so will not contribute the the output byte counter\n{% endif %}\nHello, {{ you }}!\n""")\n\ntemplate.render(you="World")\n# \'\\nHello, World!\\n\'\n\ntemplate.render(you="something longer that exceeds our limit")\n# OutputStreamLimitError: output stream limit reached, on line 4\n'})}),"\n",(0,t.jsx)(n.h2,{id:"string-to-integer-limit",children:"String to Integer Limit"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.4.4"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/python/cpython/issues/95778",children:"CVE-2020-10735"})," describes a potential denial of service attack by converting very long strings to integers. As of version 1.4.4, Python Liquid will raise a ",(0,t.jsx)(n.code,{children:"LiquidValueError"})," if an attempt is made to cast a long string to an integer."]}),"\n",(0,t.jsxs)(n.p,{children:["Due to some unfortunate early Python Liquid design decisions, this is an interpreter-wide limit, unlike other limits described on this page, which are set per ",(0,t.jsx)(n.code,{children:"liquid.Environment"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Python Liquid will look for a ",(0,t.jsx)(n.code,{children:"LIQUIDINTMAXSTRDIGITS"})," ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Environment_variable",children:"environment variable"}),", giving the maximum number of digits allowed before attempting a str to int conversion. We will fall back to looking for ",(0,t.jsx)(n.code,{children:"PYTHONINTMAXSTRDIGITS"})," before defaulting to ",(0,t.jsx)(n.code,{children:"4300"}),". Use ",(0,t.jsx)(n.code,{children:"LIQUIDINTMAXSTRDIGITS"})," when you want to use a lower limit for Liquid while keeping Python's limit higher."]}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.a,{href:"https://github.com/python/cpython/pull/96500/files#diff-08a31a70dd1f6d97aa8dacdce77db4de04c700d9949be1af611a595186aad5b3",children:"patched versions"})," of Python, Liquid will ",(0,t.jsx)(n.strong,{children:"not"})," honour ",(0,t.jsx)(n.code,{children:"sys.set_int_max_str_digits"}),". If Python's limit is lower than Liquid's, it will be possible to get a ",(0,t.jsx)(n.code,{children:"ValueError"})," exception instead of a ",(0,t.jsx)(n.code,{children:"LiquidValueError"})," when parsing Liquid templates."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Python Liquid's default limit helps guard against malicious templates authors. Be sure to validate user controlled inputs that might appear in a Liquid render context."})})]})}function m(e={}){const{wrapper:n}={...(0,o.useMDXComponents)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.r(n),i.d(n,{MDXProvider:()=>l,useMDXComponents:()=>s});var t=i(7294);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);